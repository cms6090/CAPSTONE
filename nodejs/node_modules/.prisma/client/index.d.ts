
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model facilities
 * 
 */
export type facilities = $Result.DefaultSelection<Prisma.$facilitiesPayload>
/**
 * Model lodgings
 * 
 */
export type lodgings = $Result.DefaultSelection<Prisma.$lodgingsPayload>
/**
 * Model reservations
 * 
 */
export type reservations = $Result.DefaultSelection<Prisma.$reservationsPayload>
/**
 * Model reviews
 * 
 */
export type reviews = $Result.DefaultSelection<Prisma.$reviewsPayload>
/**
 * Model room_photos
 * 
 */
export type room_photos = $Result.DefaultSelection<Prisma.$room_photosPayload>
/**
 * Model rooms
 * 
 */
export type rooms = $Result.DefaultSelection<Prisma.$roomsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Facilities
 * const facilities = await prisma.facilities.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Facilities
   * const facilities = await prisma.facilities.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.facilities`: Exposes CRUD operations for the **facilities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facilities
    * const facilities = await prisma.facilities.findMany()
    * ```
    */
  get facilities(): Prisma.facilitiesDelegate<ExtArgs>;

  /**
   * `prisma.lodgings`: Exposes CRUD operations for the **lodgings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lodgings
    * const lodgings = await prisma.lodgings.findMany()
    * ```
    */
  get lodgings(): Prisma.lodgingsDelegate<ExtArgs>;

  /**
   * `prisma.reservations`: Exposes CRUD operations for the **reservations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservations.findMany()
    * ```
    */
  get reservations(): Prisma.reservationsDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.reviewsDelegate<ExtArgs>;

  /**
   * `prisma.room_photos`: Exposes CRUD operations for the **room_photos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Room_photos
    * const room_photos = await prisma.room_photos.findMany()
    * ```
    */
  get room_photos(): Prisma.room_photosDelegate<ExtArgs>;

  /**
   * `prisma.rooms`: Exposes CRUD operations for the **rooms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.rooms.findMany()
    * ```
    */
  get rooms(): Prisma.roomsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    facilities: 'facilities',
    lodgings: 'lodgings',
    reservations: 'reservations',
    reviews: 'reviews',
    room_photos: 'room_photos',
    rooms: 'rooms',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "facilities" | "lodgings" | "reservations" | "reviews" | "room_photos" | "rooms" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      facilities: {
        payload: Prisma.$facilitiesPayload<ExtArgs>
        fields: Prisma.facilitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.facilitiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.facilitiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          findFirst: {
            args: Prisma.facilitiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.facilitiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          findMany: {
            args: Prisma.facilitiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>[]
          }
          create: {
            args: Prisma.facilitiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          createMany: {
            args: Prisma.facilitiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.facilitiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          update: {
            args: Prisma.facilitiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          deleteMany: {
            args: Prisma.facilitiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.facilitiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.facilitiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$facilitiesPayload>
          }
          aggregate: {
            args: Prisma.FacilitiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacilities>
          }
          groupBy: {
            args: Prisma.facilitiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacilitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.facilitiesCountArgs<ExtArgs>
            result: $Utils.Optional<FacilitiesCountAggregateOutputType> | number
          }
        }
      }
      lodgings: {
        payload: Prisma.$lodgingsPayload<ExtArgs>
        fields: Prisma.lodgingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lodgingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lodgingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          findFirst: {
            args: Prisma.lodgingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lodgingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          findMany: {
            args: Prisma.lodgingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>[]
          }
          create: {
            args: Prisma.lodgingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          createMany: {
            args: Prisma.lodgingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.lodgingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          update: {
            args: Prisma.lodgingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          deleteMany: {
            args: Prisma.lodgingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lodgingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.lodgingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lodgingsPayload>
          }
          aggregate: {
            args: Prisma.LodgingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLodgings>
          }
          groupBy: {
            args: Prisma.lodgingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LodgingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.lodgingsCountArgs<ExtArgs>
            result: $Utils.Optional<LodgingsCountAggregateOutputType> | number
          }
        }
      }
      reservations: {
        payload: Prisma.$reservationsPayload<ExtArgs>
        fields: Prisma.reservationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reservationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reservationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          findFirst: {
            args: Prisma.reservationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reservationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          findMany: {
            args: Prisma.reservationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>[]
          }
          create: {
            args: Prisma.reservationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          createMany: {
            args: Prisma.reservationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reservationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          update: {
            args: Prisma.reservationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          deleteMany: {
            args: Prisma.reservationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reservationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reservationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationsPayload>
          }
          aggregate: {
            args: Prisma.ReservationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservations>
          }
          groupBy: {
            args: Prisma.reservationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reservationsCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationsCountAggregateOutputType> | number
          }
        }
      }
      reviews: {
        payload: Prisma.$reviewsPayload<ExtArgs>
        fields: Prisma.reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findFirst: {
            args: Prisma.reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findMany: {
            args: Prisma.reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>[]
          }
          create: {
            args: Prisma.reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          createMany: {
            args: Prisma.reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          update: {
            args: Prisma.reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          deleteMany: {
            args: Prisma.reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
      room_photos: {
        payload: Prisma.$room_photosPayload<ExtArgs>
        fields: Prisma.room_photosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.room_photosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.room_photosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          findFirst: {
            args: Prisma.room_photosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.room_photosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          findMany: {
            args: Prisma.room_photosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>[]
          }
          create: {
            args: Prisma.room_photosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          createMany: {
            args: Prisma.room_photosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.room_photosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          update: {
            args: Prisma.room_photosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          deleteMany: {
            args: Prisma.room_photosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.room_photosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.room_photosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_photosPayload>
          }
          aggregate: {
            args: Prisma.Room_photosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom_photos>
          }
          groupBy: {
            args: Prisma.room_photosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Room_photosGroupByOutputType>[]
          }
          count: {
            args: Prisma.room_photosCountArgs<ExtArgs>
            result: $Utils.Optional<Room_photosCountAggregateOutputType> | number
          }
        }
      }
      rooms: {
        payload: Prisma.$roomsPayload<ExtArgs>
        fields: Prisma.roomsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roomsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roomsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          findFirst: {
            args: Prisma.roomsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roomsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          findMany: {
            args: Prisma.roomsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>[]
          }
          create: {
            args: Prisma.roomsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          createMany: {
            args: Prisma.roomsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.roomsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          update: {
            args: Prisma.roomsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          deleteMany: {
            args: Prisma.roomsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.roomsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.roomsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomsPayload>
          }
          aggregate: {
            args: Prisma.RoomsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRooms>
          }
          groupBy: {
            args: Prisma.roomsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomsGroupByOutputType>[]
          }
          count: {
            args: Prisma.roomsCountArgs<ExtArgs>
            result: $Utils.Optional<RoomsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LodgingsCountOutputType
   */

  export type LodgingsCountOutputType = {
    reviews: number
    rooms: number
  }

  export type LodgingsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | LodgingsCountOutputTypeCountReviewsArgs
    rooms?: boolean | LodgingsCountOutputTypeCountRoomsArgs
  }

  // Custom InputTypes
  /**
   * LodgingsCountOutputType without action
   */
  export type LodgingsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LodgingsCountOutputType
     */
    select?: LodgingsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LodgingsCountOutputType without action
   */
  export type LodgingsCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }

  /**
   * LodgingsCountOutputType without action
   */
  export type LodgingsCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roomsWhereInput
  }


  /**
   * Count Type RoomsCountOutputType
   */

  export type RoomsCountOutputType = {
    facilities: number
    reservations: number
    room_photos: number
  }

  export type RoomsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facilities?: boolean | RoomsCountOutputTypeCountFacilitiesArgs
    reservations?: boolean | RoomsCountOutputTypeCountReservationsArgs
    room_photos?: boolean | RoomsCountOutputTypeCountRoom_photosArgs
  }

  // Custom InputTypes
  /**
   * RoomsCountOutputType without action
   */
  export type RoomsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomsCountOutputType
     */
    select?: RoomsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomsCountOutputType without action
   */
  export type RoomsCountOutputTypeCountFacilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: facilitiesWhereInput
  }

  /**
   * RoomsCountOutputType without action
   */
  export type RoomsCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationsWhereInput
  }

  /**
   * RoomsCountOutputType without action
   */
  export type RoomsCountOutputTypeCountRoom_photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: room_photosWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    reservations: number
    reviews: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | UsersCountOutputTypeCountReservationsArgs
    reviews?: boolean | UsersCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model facilities
   */

  export type AggregateFacilities = {
    _count: FacilitiesCountAggregateOutputType | null
    _avg: FacilitiesAvgAggregateOutputType | null
    _sum: FacilitiesSumAggregateOutputType | null
    _min: FacilitiesMinAggregateOutputType | null
    _max: FacilitiesMaxAggregateOutputType | null
  }

  export type FacilitiesAvgAggregateOutputType = {
    facility_id: number | null
    room_id: number | null
    has_bath: number | null
  }

  export type FacilitiesSumAggregateOutputType = {
    facility_id: number | null
    room_id: number | null
    has_bath: number | null
  }

  export type FacilitiesMinAggregateOutputType = {
    facility_id: number | null
    room_id: number | null
    has_bathfacility: boolean | null
    has_bath: number | null
    has_home_theater: boolean | null
    has_air_conditioning: boolean | null
    has_tv: boolean | null
    has_pc: boolean | null
    cable: boolean | null
    has_internet: boolean | null
    has_refrigerator: boolean | null
    has_toiletries: boolean | null
    has_sofa: boolean | null
    has_cook: boolean | null
    has_table: boolean | null
    hairdryer: boolean | null
  }

  export type FacilitiesMaxAggregateOutputType = {
    facility_id: number | null
    room_id: number | null
    has_bathfacility: boolean | null
    has_bath: number | null
    has_home_theater: boolean | null
    has_air_conditioning: boolean | null
    has_tv: boolean | null
    has_pc: boolean | null
    cable: boolean | null
    has_internet: boolean | null
    has_refrigerator: boolean | null
    has_toiletries: boolean | null
    has_sofa: boolean | null
    has_cook: boolean | null
    has_table: boolean | null
    hairdryer: boolean | null
  }

  export type FacilitiesCountAggregateOutputType = {
    facility_id: number
    room_id: number
    has_bathfacility: number
    has_bath: number
    has_home_theater: number
    has_air_conditioning: number
    has_tv: number
    has_pc: number
    cable: number
    has_internet: number
    has_refrigerator: number
    has_toiletries: number
    has_sofa: number
    has_cook: number
    has_table: number
    hairdryer: number
    _all: number
  }


  export type FacilitiesAvgAggregateInputType = {
    facility_id?: true
    room_id?: true
    has_bath?: true
  }

  export type FacilitiesSumAggregateInputType = {
    facility_id?: true
    room_id?: true
    has_bath?: true
  }

  export type FacilitiesMinAggregateInputType = {
    facility_id?: true
    room_id?: true
    has_bathfacility?: true
    has_bath?: true
    has_home_theater?: true
    has_air_conditioning?: true
    has_tv?: true
    has_pc?: true
    cable?: true
    has_internet?: true
    has_refrigerator?: true
    has_toiletries?: true
    has_sofa?: true
    has_cook?: true
    has_table?: true
    hairdryer?: true
  }

  export type FacilitiesMaxAggregateInputType = {
    facility_id?: true
    room_id?: true
    has_bathfacility?: true
    has_bath?: true
    has_home_theater?: true
    has_air_conditioning?: true
    has_tv?: true
    has_pc?: true
    cable?: true
    has_internet?: true
    has_refrigerator?: true
    has_toiletries?: true
    has_sofa?: true
    has_cook?: true
    has_table?: true
    hairdryer?: true
  }

  export type FacilitiesCountAggregateInputType = {
    facility_id?: true
    room_id?: true
    has_bathfacility?: true
    has_bath?: true
    has_home_theater?: true
    has_air_conditioning?: true
    has_tv?: true
    has_pc?: true
    cable?: true
    has_internet?: true
    has_refrigerator?: true
    has_toiletries?: true
    has_sofa?: true
    has_cook?: true
    has_table?: true
    hairdryer?: true
    _all?: true
  }

  export type FacilitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which facilities to aggregate.
     */
    where?: facilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facilities to fetch.
     */
    orderBy?: facilitiesOrderByWithRelationInput | facilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: facilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned facilities
    **/
    _count?: true | FacilitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacilitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacilitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacilitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacilitiesMaxAggregateInputType
  }

  export type GetFacilitiesAggregateType<T extends FacilitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateFacilities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacilities[P]>
      : GetScalarType<T[P], AggregateFacilities[P]>
  }




  export type facilitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: facilitiesWhereInput
    orderBy?: facilitiesOrderByWithAggregationInput | facilitiesOrderByWithAggregationInput[]
    by: FacilitiesScalarFieldEnum[] | FacilitiesScalarFieldEnum
    having?: facilitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacilitiesCountAggregateInputType | true
    _avg?: FacilitiesAvgAggregateInputType
    _sum?: FacilitiesSumAggregateInputType
    _min?: FacilitiesMinAggregateInputType
    _max?: FacilitiesMaxAggregateInputType
  }

  export type FacilitiesGroupByOutputType = {
    facility_id: number
    room_id: number | null
    has_bathfacility: boolean | null
    has_bath: number | null
    has_home_theater: boolean | null
    has_air_conditioning: boolean | null
    has_tv: boolean | null
    has_pc: boolean | null
    cable: boolean | null
    has_internet: boolean | null
    has_refrigerator: boolean | null
    has_toiletries: boolean | null
    has_sofa: boolean | null
    has_cook: boolean | null
    has_table: boolean | null
    hairdryer: boolean | null
    _count: FacilitiesCountAggregateOutputType | null
    _avg: FacilitiesAvgAggregateOutputType | null
    _sum: FacilitiesSumAggregateOutputType | null
    _min: FacilitiesMinAggregateOutputType | null
    _max: FacilitiesMaxAggregateOutputType | null
  }

  type GetFacilitiesGroupByPayload<T extends facilitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacilitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacilitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacilitiesGroupByOutputType[P]>
            : GetScalarType<T[P], FacilitiesGroupByOutputType[P]>
        }
      >
    >


  export type facilitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    facility_id?: boolean
    room_id?: boolean
    has_bathfacility?: boolean
    has_bath?: boolean
    has_home_theater?: boolean
    has_air_conditioning?: boolean
    has_tv?: boolean
    has_pc?: boolean
    cable?: boolean
    has_internet?: boolean
    has_refrigerator?: boolean
    has_toiletries?: boolean
    has_sofa?: boolean
    has_cook?: boolean
    has_table?: boolean
    hairdryer?: boolean
    rooms?: boolean | facilities$roomsArgs<ExtArgs>
  }, ExtArgs["result"]["facilities"]>


  export type facilitiesSelectScalar = {
    facility_id?: boolean
    room_id?: boolean
    has_bathfacility?: boolean
    has_bath?: boolean
    has_home_theater?: boolean
    has_air_conditioning?: boolean
    has_tv?: boolean
    has_pc?: boolean
    cable?: boolean
    has_internet?: boolean
    has_refrigerator?: boolean
    has_toiletries?: boolean
    has_sofa?: boolean
    has_cook?: boolean
    has_table?: boolean
    hairdryer?: boolean
  }

  export type facilitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | facilities$roomsArgs<ExtArgs>
  }

  export type $facilitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "facilities"
    objects: {
      rooms: Prisma.$roomsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      facility_id: number
      room_id: number | null
      has_bathfacility: boolean | null
      has_bath: number | null
      has_home_theater: boolean | null
      has_air_conditioning: boolean | null
      has_tv: boolean | null
      has_pc: boolean | null
      cable: boolean | null
      has_internet: boolean | null
      has_refrigerator: boolean | null
      has_toiletries: boolean | null
      has_sofa: boolean | null
      has_cook: boolean | null
      has_table: boolean | null
      hairdryer: boolean | null
    }, ExtArgs["result"]["facilities"]>
    composites: {}
  }

  type facilitiesGetPayload<S extends boolean | null | undefined | facilitiesDefaultArgs> = $Result.GetResult<Prisma.$facilitiesPayload, S>

  type facilitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<facilitiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacilitiesCountAggregateInputType | true
    }

  export interface facilitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['facilities'], meta: { name: 'facilities' } }
    /**
     * Find zero or one Facilities that matches the filter.
     * @param {facilitiesFindUniqueArgs} args - Arguments to find a Facilities
     * @example
     * // Get one Facilities
     * const facilities = await prisma.facilities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends facilitiesFindUniqueArgs>(args: SelectSubset<T, facilitiesFindUniqueArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Facilities that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {facilitiesFindUniqueOrThrowArgs} args - Arguments to find a Facilities
     * @example
     * // Get one Facilities
     * const facilities = await prisma.facilities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends facilitiesFindUniqueOrThrowArgs>(args: SelectSubset<T, facilitiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Facilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesFindFirstArgs} args - Arguments to find a Facilities
     * @example
     * // Get one Facilities
     * const facilities = await prisma.facilities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends facilitiesFindFirstArgs>(args?: SelectSubset<T, facilitiesFindFirstArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Facilities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesFindFirstOrThrowArgs} args - Arguments to find a Facilities
     * @example
     * // Get one Facilities
     * const facilities = await prisma.facilities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends facilitiesFindFirstOrThrowArgs>(args?: SelectSubset<T, facilitiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Facilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facilities
     * const facilities = await prisma.facilities.findMany()
     * 
     * // Get first 10 Facilities
     * const facilities = await prisma.facilities.findMany({ take: 10 })
     * 
     * // Only select the `facility_id`
     * const facilitiesWithFacility_idOnly = await prisma.facilities.findMany({ select: { facility_id: true } })
     * 
     */
    findMany<T extends facilitiesFindManyArgs>(args?: SelectSubset<T, facilitiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Facilities.
     * @param {facilitiesCreateArgs} args - Arguments to create a Facilities.
     * @example
     * // Create one Facilities
     * const Facilities = await prisma.facilities.create({
     *   data: {
     *     // ... data to create a Facilities
     *   }
     * })
     * 
     */
    create<T extends facilitiesCreateArgs>(args: SelectSubset<T, facilitiesCreateArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Facilities.
     * @param {facilitiesCreateManyArgs} args - Arguments to create many Facilities.
     * @example
     * // Create many Facilities
     * const facilities = await prisma.facilities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends facilitiesCreateManyArgs>(args?: SelectSubset<T, facilitiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Facilities.
     * @param {facilitiesDeleteArgs} args - Arguments to delete one Facilities.
     * @example
     * // Delete one Facilities
     * const Facilities = await prisma.facilities.delete({
     *   where: {
     *     // ... filter to delete one Facilities
     *   }
     * })
     * 
     */
    delete<T extends facilitiesDeleteArgs>(args: SelectSubset<T, facilitiesDeleteArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Facilities.
     * @param {facilitiesUpdateArgs} args - Arguments to update one Facilities.
     * @example
     * // Update one Facilities
     * const facilities = await prisma.facilities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends facilitiesUpdateArgs>(args: SelectSubset<T, facilitiesUpdateArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Facilities.
     * @param {facilitiesDeleteManyArgs} args - Arguments to filter Facilities to delete.
     * @example
     * // Delete a few Facilities
     * const { count } = await prisma.facilities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends facilitiesDeleteManyArgs>(args?: SelectSubset<T, facilitiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facilities
     * const facilities = await prisma.facilities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends facilitiesUpdateManyArgs>(args: SelectSubset<T, facilitiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Facilities.
     * @param {facilitiesUpsertArgs} args - Arguments to update or create a Facilities.
     * @example
     * // Update or create a Facilities
     * const facilities = await prisma.facilities.upsert({
     *   create: {
     *     // ... data to create a Facilities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Facilities we want to update
     *   }
     * })
     */
    upsert<T extends facilitiesUpsertArgs>(args: SelectSubset<T, facilitiesUpsertArgs<ExtArgs>>): Prisma__facilitiesClient<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Facilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesCountArgs} args - Arguments to filter Facilities to count.
     * @example
     * // Count the number of Facilities
     * const count = await prisma.facilities.count({
     *   where: {
     *     // ... the filter for the Facilities we want to count
     *   }
     * })
    **/
    count<T extends facilitiesCountArgs>(
      args?: Subset<T, facilitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacilitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Facilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacilitiesAggregateArgs>(args: Subset<T, FacilitiesAggregateArgs>): Prisma.PrismaPromise<GetFacilitiesAggregateType<T>>

    /**
     * Group by Facilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facilitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends facilitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: facilitiesGroupByArgs['orderBy'] }
        : { orderBy?: facilitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, facilitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacilitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the facilities model
   */
  readonly fields: facilitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for facilities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__facilitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends facilities$roomsArgs<ExtArgs> = {}>(args?: Subset<T, facilities$roomsArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the facilities model
   */ 
  interface facilitiesFieldRefs {
    readonly facility_id: FieldRef<"facilities", 'Int'>
    readonly room_id: FieldRef<"facilities", 'Int'>
    readonly has_bathfacility: FieldRef<"facilities", 'Boolean'>
    readonly has_bath: FieldRef<"facilities", 'Int'>
    readonly has_home_theater: FieldRef<"facilities", 'Boolean'>
    readonly has_air_conditioning: FieldRef<"facilities", 'Boolean'>
    readonly has_tv: FieldRef<"facilities", 'Boolean'>
    readonly has_pc: FieldRef<"facilities", 'Boolean'>
    readonly cable: FieldRef<"facilities", 'Boolean'>
    readonly has_internet: FieldRef<"facilities", 'Boolean'>
    readonly has_refrigerator: FieldRef<"facilities", 'Boolean'>
    readonly has_toiletries: FieldRef<"facilities", 'Boolean'>
    readonly has_sofa: FieldRef<"facilities", 'Boolean'>
    readonly has_cook: FieldRef<"facilities", 'Boolean'>
    readonly has_table: FieldRef<"facilities", 'Boolean'>
    readonly hairdryer: FieldRef<"facilities", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * facilities findUnique
   */
  export type facilitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter, which facilities to fetch.
     */
    where: facilitiesWhereUniqueInput
  }

  /**
   * facilities findUniqueOrThrow
   */
  export type facilitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter, which facilities to fetch.
     */
    where: facilitiesWhereUniqueInput
  }

  /**
   * facilities findFirst
   */
  export type facilitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter, which facilities to fetch.
     */
    where?: facilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facilities to fetch.
     */
    orderBy?: facilitiesOrderByWithRelationInput | facilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for facilities.
     */
    cursor?: facilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of facilities.
     */
    distinct?: FacilitiesScalarFieldEnum | FacilitiesScalarFieldEnum[]
  }

  /**
   * facilities findFirstOrThrow
   */
  export type facilitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter, which facilities to fetch.
     */
    where?: facilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facilities to fetch.
     */
    orderBy?: facilitiesOrderByWithRelationInput | facilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for facilities.
     */
    cursor?: facilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of facilities.
     */
    distinct?: FacilitiesScalarFieldEnum | FacilitiesScalarFieldEnum[]
  }

  /**
   * facilities findMany
   */
  export type facilitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter, which facilities to fetch.
     */
    where?: facilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facilities to fetch.
     */
    orderBy?: facilitiesOrderByWithRelationInput | facilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing facilities.
     */
    cursor?: facilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facilities.
     */
    skip?: number
    distinct?: FacilitiesScalarFieldEnum | FacilitiesScalarFieldEnum[]
  }

  /**
   * facilities create
   */
  export type facilitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a facilities.
     */
    data?: XOR<facilitiesCreateInput, facilitiesUncheckedCreateInput>
  }

  /**
   * facilities createMany
   */
  export type facilitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many facilities.
     */
    data: facilitiesCreateManyInput | facilitiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * facilities update
   */
  export type facilitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a facilities.
     */
    data: XOR<facilitiesUpdateInput, facilitiesUncheckedUpdateInput>
    /**
     * Choose, which facilities to update.
     */
    where: facilitiesWhereUniqueInput
  }

  /**
   * facilities updateMany
   */
  export type facilitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update facilities.
     */
    data: XOR<facilitiesUpdateManyMutationInput, facilitiesUncheckedUpdateManyInput>
    /**
     * Filter which facilities to update
     */
    where?: facilitiesWhereInput
  }

  /**
   * facilities upsert
   */
  export type facilitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the facilities to update in case it exists.
     */
    where: facilitiesWhereUniqueInput
    /**
     * In case the facilities found by the `where` argument doesn't exist, create a new facilities with this data.
     */
    create: XOR<facilitiesCreateInput, facilitiesUncheckedCreateInput>
    /**
     * In case the facilities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<facilitiesUpdateInput, facilitiesUncheckedUpdateInput>
  }

  /**
   * facilities delete
   */
  export type facilitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    /**
     * Filter which facilities to delete.
     */
    where: facilitiesWhereUniqueInput
  }

  /**
   * facilities deleteMany
   */
  export type facilitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which facilities to delete
     */
    where?: facilitiesWhereInput
  }

  /**
   * facilities.rooms
   */
  export type facilities$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    where?: roomsWhereInput
  }

  /**
   * facilities without action
   */
  export type facilitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
  }


  /**
   * Model lodgings
   */

  export type AggregateLodgings = {
    _count: LodgingsCountAggregateOutputType | null
    _avg: LodgingsAvgAggregateOutputType | null
    _sum: LodgingsSumAggregateOutputType | null
    _min: LodgingsMinAggregateOutputType | null
    _max: LodgingsMaxAggregateOutputType | null
  }

  export type LodgingsAvgAggregateOutputType = {
    lodging_id: number | null
    rating: Decimal | null
  }

  export type LodgingsSumAggregateOutputType = {
    lodging_id: number | null
    rating: Decimal | null
  }

  export type LodgingsMinAggregateOutputType = {
    lodging_id: number | null
    name: string | null
    part: string | null
    area: string | null
    sigungu: string | null
    address: string | null
    rating: Decimal | null
    tel: string | null
    main_image: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LodgingsMaxAggregateOutputType = {
    lodging_id: number | null
    name: string | null
    part: string | null
    area: string | null
    sigungu: string | null
    address: string | null
    rating: Decimal | null
    tel: string | null
    main_image: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LodgingsCountAggregateOutputType = {
    lodging_id: number
    name: number
    part: number
    area: number
    sigungu: number
    address: number
    rating: number
    tel: number
    main_image: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LodgingsAvgAggregateInputType = {
    lodging_id?: true
    rating?: true
  }

  export type LodgingsSumAggregateInputType = {
    lodging_id?: true
    rating?: true
  }

  export type LodgingsMinAggregateInputType = {
    lodging_id?: true
    name?: true
    part?: true
    area?: true
    sigungu?: true
    address?: true
    rating?: true
    tel?: true
    main_image?: true
    created_at?: true
    updated_at?: true
  }

  export type LodgingsMaxAggregateInputType = {
    lodging_id?: true
    name?: true
    part?: true
    area?: true
    sigungu?: true
    address?: true
    rating?: true
    tel?: true
    main_image?: true
    created_at?: true
    updated_at?: true
  }

  export type LodgingsCountAggregateInputType = {
    lodging_id?: true
    name?: true
    part?: true
    area?: true
    sigungu?: true
    address?: true
    rating?: true
    tel?: true
    main_image?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LodgingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lodgings to aggregate.
     */
    where?: lodgingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lodgings to fetch.
     */
    orderBy?: lodgingsOrderByWithRelationInput | lodgingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lodgingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lodgings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lodgings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lodgings
    **/
    _count?: true | LodgingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LodgingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LodgingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LodgingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LodgingsMaxAggregateInputType
  }

  export type GetLodgingsAggregateType<T extends LodgingsAggregateArgs> = {
        [P in keyof T & keyof AggregateLodgings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLodgings[P]>
      : GetScalarType<T[P], AggregateLodgings[P]>
  }




  export type lodgingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lodgingsWhereInput
    orderBy?: lodgingsOrderByWithAggregationInput | lodgingsOrderByWithAggregationInput[]
    by: LodgingsScalarFieldEnum[] | LodgingsScalarFieldEnum
    having?: lodgingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LodgingsCountAggregateInputType | true
    _avg?: LodgingsAvgAggregateInputType
    _sum?: LodgingsSumAggregateInputType
    _min?: LodgingsMinAggregateInputType
    _max?: LodgingsMaxAggregateInputType
  }

  export type LodgingsGroupByOutputType = {
    lodging_id: number
    name: string
    part: string
    area: string
    sigungu: string | null
    address: string
    rating: Decimal | null
    tel: string | null
    main_image: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: LodgingsCountAggregateOutputType | null
    _avg: LodgingsAvgAggregateOutputType | null
    _sum: LodgingsSumAggregateOutputType | null
    _min: LodgingsMinAggregateOutputType | null
    _max: LodgingsMaxAggregateOutputType | null
  }

  type GetLodgingsGroupByPayload<T extends lodgingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LodgingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LodgingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LodgingsGroupByOutputType[P]>
            : GetScalarType<T[P], LodgingsGroupByOutputType[P]>
        }
      >
    >


  export type lodgingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lodging_id?: boolean
    name?: boolean
    part?: boolean
    area?: boolean
    sigungu?: boolean
    address?: boolean
    rating?: boolean
    tel?: boolean
    main_image?: boolean
    created_at?: boolean
    updated_at?: boolean
    reviews?: boolean | lodgings$reviewsArgs<ExtArgs>
    rooms?: boolean | lodgings$roomsArgs<ExtArgs>
    _count?: boolean | LodgingsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lodgings"]>


  export type lodgingsSelectScalar = {
    lodging_id?: boolean
    name?: boolean
    part?: boolean
    area?: boolean
    sigungu?: boolean
    address?: boolean
    rating?: boolean
    tel?: boolean
    main_image?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type lodgingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | lodgings$reviewsArgs<ExtArgs>
    rooms?: boolean | lodgings$roomsArgs<ExtArgs>
    _count?: boolean | LodgingsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $lodgingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lodgings"
    objects: {
      reviews: Prisma.$reviewsPayload<ExtArgs>[]
      rooms: Prisma.$roomsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      lodging_id: number
      name: string
      part: string
      area: string
      sigungu: string | null
      address: string
      rating: Prisma.Decimal | null
      tel: string | null
      main_image: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["lodgings"]>
    composites: {}
  }

  type lodgingsGetPayload<S extends boolean | null | undefined | lodgingsDefaultArgs> = $Result.GetResult<Prisma.$lodgingsPayload, S>

  type lodgingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<lodgingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LodgingsCountAggregateInputType | true
    }

  export interface lodgingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lodgings'], meta: { name: 'lodgings' } }
    /**
     * Find zero or one Lodgings that matches the filter.
     * @param {lodgingsFindUniqueArgs} args - Arguments to find a Lodgings
     * @example
     * // Get one Lodgings
     * const lodgings = await prisma.lodgings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lodgingsFindUniqueArgs>(args: SelectSubset<T, lodgingsFindUniqueArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lodgings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {lodgingsFindUniqueOrThrowArgs} args - Arguments to find a Lodgings
     * @example
     * // Get one Lodgings
     * const lodgings = await prisma.lodgings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lodgingsFindUniqueOrThrowArgs>(args: SelectSubset<T, lodgingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lodgings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsFindFirstArgs} args - Arguments to find a Lodgings
     * @example
     * // Get one Lodgings
     * const lodgings = await prisma.lodgings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lodgingsFindFirstArgs>(args?: SelectSubset<T, lodgingsFindFirstArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lodgings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsFindFirstOrThrowArgs} args - Arguments to find a Lodgings
     * @example
     * // Get one Lodgings
     * const lodgings = await prisma.lodgings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lodgingsFindFirstOrThrowArgs>(args?: SelectSubset<T, lodgingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lodgings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lodgings
     * const lodgings = await prisma.lodgings.findMany()
     * 
     * // Get first 10 Lodgings
     * const lodgings = await prisma.lodgings.findMany({ take: 10 })
     * 
     * // Only select the `lodging_id`
     * const lodgingsWithLodging_idOnly = await prisma.lodgings.findMany({ select: { lodging_id: true } })
     * 
     */
    findMany<T extends lodgingsFindManyArgs>(args?: SelectSubset<T, lodgingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lodgings.
     * @param {lodgingsCreateArgs} args - Arguments to create a Lodgings.
     * @example
     * // Create one Lodgings
     * const Lodgings = await prisma.lodgings.create({
     *   data: {
     *     // ... data to create a Lodgings
     *   }
     * })
     * 
     */
    create<T extends lodgingsCreateArgs>(args: SelectSubset<T, lodgingsCreateArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lodgings.
     * @param {lodgingsCreateManyArgs} args - Arguments to create many Lodgings.
     * @example
     * // Create many Lodgings
     * const lodgings = await prisma.lodgings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lodgingsCreateManyArgs>(args?: SelectSubset<T, lodgingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lodgings.
     * @param {lodgingsDeleteArgs} args - Arguments to delete one Lodgings.
     * @example
     * // Delete one Lodgings
     * const Lodgings = await prisma.lodgings.delete({
     *   where: {
     *     // ... filter to delete one Lodgings
     *   }
     * })
     * 
     */
    delete<T extends lodgingsDeleteArgs>(args: SelectSubset<T, lodgingsDeleteArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lodgings.
     * @param {lodgingsUpdateArgs} args - Arguments to update one Lodgings.
     * @example
     * // Update one Lodgings
     * const lodgings = await prisma.lodgings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lodgingsUpdateArgs>(args: SelectSubset<T, lodgingsUpdateArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lodgings.
     * @param {lodgingsDeleteManyArgs} args - Arguments to filter Lodgings to delete.
     * @example
     * // Delete a few Lodgings
     * const { count } = await prisma.lodgings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lodgingsDeleteManyArgs>(args?: SelectSubset<T, lodgingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lodgings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lodgings
     * const lodgings = await prisma.lodgings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lodgingsUpdateManyArgs>(args: SelectSubset<T, lodgingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lodgings.
     * @param {lodgingsUpsertArgs} args - Arguments to update or create a Lodgings.
     * @example
     * // Update or create a Lodgings
     * const lodgings = await prisma.lodgings.upsert({
     *   create: {
     *     // ... data to create a Lodgings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lodgings we want to update
     *   }
     * })
     */
    upsert<T extends lodgingsUpsertArgs>(args: SelectSubset<T, lodgingsUpsertArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lodgings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsCountArgs} args - Arguments to filter Lodgings to count.
     * @example
     * // Count the number of Lodgings
     * const count = await prisma.lodgings.count({
     *   where: {
     *     // ... the filter for the Lodgings we want to count
     *   }
     * })
    **/
    count<T extends lodgingsCountArgs>(
      args?: Subset<T, lodgingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LodgingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lodgings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LodgingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LodgingsAggregateArgs>(args: Subset<T, LodgingsAggregateArgs>): Prisma.PrismaPromise<GetLodgingsAggregateType<T>>

    /**
     * Group by Lodgings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lodgingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lodgingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lodgingsGroupByArgs['orderBy'] }
        : { orderBy?: lodgingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lodgingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLodgingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lodgings model
   */
  readonly fields: lodgingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lodgings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lodgingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends lodgings$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, lodgings$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany"> | Null>
    rooms<T extends lodgings$roomsArgs<ExtArgs> = {}>(args?: Subset<T, lodgings$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lodgings model
   */ 
  interface lodgingsFieldRefs {
    readonly lodging_id: FieldRef<"lodgings", 'Int'>
    readonly name: FieldRef<"lodgings", 'String'>
    readonly part: FieldRef<"lodgings", 'String'>
    readonly area: FieldRef<"lodgings", 'String'>
    readonly sigungu: FieldRef<"lodgings", 'String'>
    readonly address: FieldRef<"lodgings", 'String'>
    readonly rating: FieldRef<"lodgings", 'Decimal'>
    readonly tel: FieldRef<"lodgings", 'String'>
    readonly main_image: FieldRef<"lodgings", 'String'>
    readonly created_at: FieldRef<"lodgings", 'DateTime'>
    readonly updated_at: FieldRef<"lodgings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * lodgings findUnique
   */
  export type lodgingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter, which lodgings to fetch.
     */
    where: lodgingsWhereUniqueInput
  }

  /**
   * lodgings findUniqueOrThrow
   */
  export type lodgingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter, which lodgings to fetch.
     */
    where: lodgingsWhereUniqueInput
  }

  /**
   * lodgings findFirst
   */
  export type lodgingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter, which lodgings to fetch.
     */
    where?: lodgingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lodgings to fetch.
     */
    orderBy?: lodgingsOrderByWithRelationInput | lodgingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lodgings.
     */
    cursor?: lodgingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lodgings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lodgings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lodgings.
     */
    distinct?: LodgingsScalarFieldEnum | LodgingsScalarFieldEnum[]
  }

  /**
   * lodgings findFirstOrThrow
   */
  export type lodgingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter, which lodgings to fetch.
     */
    where?: lodgingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lodgings to fetch.
     */
    orderBy?: lodgingsOrderByWithRelationInput | lodgingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lodgings.
     */
    cursor?: lodgingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lodgings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lodgings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lodgings.
     */
    distinct?: LodgingsScalarFieldEnum | LodgingsScalarFieldEnum[]
  }

  /**
   * lodgings findMany
   */
  export type lodgingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter, which lodgings to fetch.
     */
    where?: lodgingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lodgings to fetch.
     */
    orderBy?: lodgingsOrderByWithRelationInput | lodgingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lodgings.
     */
    cursor?: lodgingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lodgings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lodgings.
     */
    skip?: number
    distinct?: LodgingsScalarFieldEnum | LodgingsScalarFieldEnum[]
  }

  /**
   * lodgings create
   */
  export type lodgingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * The data needed to create a lodgings.
     */
    data: XOR<lodgingsCreateInput, lodgingsUncheckedCreateInput>
  }

  /**
   * lodgings createMany
   */
  export type lodgingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lodgings.
     */
    data: lodgingsCreateManyInput | lodgingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lodgings update
   */
  export type lodgingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * The data needed to update a lodgings.
     */
    data: XOR<lodgingsUpdateInput, lodgingsUncheckedUpdateInput>
    /**
     * Choose, which lodgings to update.
     */
    where: lodgingsWhereUniqueInput
  }

  /**
   * lodgings updateMany
   */
  export type lodgingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lodgings.
     */
    data: XOR<lodgingsUpdateManyMutationInput, lodgingsUncheckedUpdateManyInput>
    /**
     * Filter which lodgings to update
     */
    where?: lodgingsWhereInput
  }

  /**
   * lodgings upsert
   */
  export type lodgingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * The filter to search for the lodgings to update in case it exists.
     */
    where: lodgingsWhereUniqueInput
    /**
     * In case the lodgings found by the `where` argument doesn't exist, create a new lodgings with this data.
     */
    create: XOR<lodgingsCreateInput, lodgingsUncheckedCreateInput>
    /**
     * In case the lodgings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lodgingsUpdateInput, lodgingsUncheckedUpdateInput>
  }

  /**
   * lodgings delete
   */
  export type lodgingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    /**
     * Filter which lodgings to delete.
     */
    where: lodgingsWhereUniqueInput
  }

  /**
   * lodgings deleteMany
   */
  export type lodgingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lodgings to delete
     */
    where?: lodgingsWhereInput
  }

  /**
   * lodgings.reviews
   */
  export type lodgings$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * lodgings.rooms
   */
  export type lodgings$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    where?: roomsWhereInput
    orderBy?: roomsOrderByWithRelationInput | roomsOrderByWithRelationInput[]
    cursor?: roomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomsScalarFieldEnum | RoomsScalarFieldEnum[]
  }

  /**
   * lodgings without action
   */
  export type lodgingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
  }


  /**
   * Model reservations
   */

  export type AggregateReservations = {
    _count: ReservationsCountAggregateOutputType | null
    _avg: ReservationsAvgAggregateOutputType | null
    _sum: ReservationsSumAggregateOutputType | null
    _min: ReservationsMinAggregateOutputType | null
    _max: ReservationsMaxAggregateOutputType | null
  }

  export type ReservationsAvgAggregateOutputType = {
    reservation_id: number | null
    user_id: number | null
    room_id: number | null
    person_num: number | null
    total_price: Decimal | null
  }

  export type ReservationsSumAggregateOutputType = {
    reservation_id: number | null
    user_id: number | null
    room_id: number | null
    person_num: number | null
    total_price: Decimal | null
  }

  export type ReservationsMinAggregateOutputType = {
    reservation_id: number | null
    user_id: number | null
    room_id: number | null
    check_in_date: Date | null
    check_out_date: Date | null
    person_num: number | null
    total_price: Decimal | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReservationsMaxAggregateOutputType = {
    reservation_id: number | null
    user_id: number | null
    room_id: number | null
    check_in_date: Date | null
    check_out_date: Date | null
    person_num: number | null
    total_price: Decimal | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReservationsCountAggregateOutputType = {
    reservation_id: number
    user_id: number
    room_id: number
    check_in_date: number
    check_out_date: number
    person_num: number
    total_price: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ReservationsAvgAggregateInputType = {
    reservation_id?: true
    user_id?: true
    room_id?: true
    person_num?: true
    total_price?: true
  }

  export type ReservationsSumAggregateInputType = {
    reservation_id?: true
    user_id?: true
    room_id?: true
    person_num?: true
    total_price?: true
  }

  export type ReservationsMinAggregateInputType = {
    reservation_id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    person_num?: true
    total_price?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ReservationsMaxAggregateInputType = {
    reservation_id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    person_num?: true
    total_price?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ReservationsCountAggregateInputType = {
    reservation_id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    person_num?: true
    total_price?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ReservationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservations to aggregate.
     */
    where?: reservationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reservationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reservations
    **/
    _count?: true | ReservationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationsMaxAggregateInputType
  }

  export type GetReservationsAggregateType<T extends ReservationsAggregateArgs> = {
        [P in keyof T & keyof AggregateReservations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservations[P]>
      : GetScalarType<T[P], AggregateReservations[P]>
  }




  export type reservationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationsWhereInput
    orderBy?: reservationsOrderByWithAggregationInput | reservationsOrderByWithAggregationInput[]
    by: ReservationsScalarFieldEnum[] | ReservationsScalarFieldEnum
    having?: reservationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationsCountAggregateInputType | true
    _avg?: ReservationsAvgAggregateInputType
    _sum?: ReservationsSumAggregateInputType
    _min?: ReservationsMinAggregateInputType
    _max?: ReservationsMaxAggregateInputType
  }

  export type ReservationsGroupByOutputType = {
    reservation_id: number
    user_id: number | null
    room_id: number | null
    check_in_date: Date
    check_out_date: Date
    person_num: number
    total_price: Decimal
    status: string
    created_at: Date | null
    updated_at: Date | null
    _count: ReservationsCountAggregateOutputType | null
    _avg: ReservationsAvgAggregateOutputType | null
    _sum: ReservationsSumAggregateOutputType | null
    _min: ReservationsMinAggregateOutputType | null
    _max: ReservationsMaxAggregateOutputType | null
  }

  type GetReservationsGroupByPayload<T extends reservationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationsGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationsGroupByOutputType[P]>
        }
      >
    >


  export type reservationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reservation_id?: boolean
    user_id?: boolean
    room_id?: boolean
    check_in_date?: boolean
    check_out_date?: boolean
    person_num?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | reservations$usersArgs<ExtArgs>
    rooms?: boolean | reservations$roomsArgs<ExtArgs>
  }, ExtArgs["result"]["reservations"]>


  export type reservationsSelectScalar = {
    reservation_id?: boolean
    user_id?: boolean
    room_id?: boolean
    check_in_date?: boolean
    check_out_date?: boolean
    person_num?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type reservationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | reservations$usersArgs<ExtArgs>
    rooms?: boolean | reservations$roomsArgs<ExtArgs>
  }

  export type $reservationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reservations"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
      rooms: Prisma.$roomsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      reservation_id: number
      user_id: number | null
      room_id: number | null
      check_in_date: Date
      check_out_date: Date
      person_num: number
      total_price: Prisma.Decimal
      status: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["reservations"]>
    composites: {}
  }

  type reservationsGetPayload<S extends boolean | null | undefined | reservationsDefaultArgs> = $Result.GetResult<Prisma.$reservationsPayload, S>

  type reservationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reservationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationsCountAggregateInputType | true
    }

  export interface reservationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reservations'], meta: { name: 'reservations' } }
    /**
     * Find zero or one Reservations that matches the filter.
     * @param {reservationsFindUniqueArgs} args - Arguments to find a Reservations
     * @example
     * // Get one Reservations
     * const reservations = await prisma.reservations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reservationsFindUniqueArgs>(args: SelectSubset<T, reservationsFindUniqueArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reservations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reservationsFindUniqueOrThrowArgs} args - Arguments to find a Reservations
     * @example
     * // Get one Reservations
     * const reservations = await prisma.reservations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reservationsFindUniqueOrThrowArgs>(args: SelectSubset<T, reservationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsFindFirstArgs} args - Arguments to find a Reservations
     * @example
     * // Get one Reservations
     * const reservations = await prisma.reservations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reservationsFindFirstArgs>(args?: SelectSubset<T, reservationsFindFirstArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reservations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsFindFirstOrThrowArgs} args - Arguments to find a Reservations
     * @example
     * // Get one Reservations
     * const reservations = await prisma.reservations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reservationsFindFirstOrThrowArgs>(args?: SelectSubset<T, reservationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservations.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservations.findMany({ take: 10 })
     * 
     * // Only select the `reservation_id`
     * const reservationsWithReservation_idOnly = await prisma.reservations.findMany({ select: { reservation_id: true } })
     * 
     */
    findMany<T extends reservationsFindManyArgs>(args?: SelectSubset<T, reservationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reservations.
     * @param {reservationsCreateArgs} args - Arguments to create a Reservations.
     * @example
     * // Create one Reservations
     * const Reservations = await prisma.reservations.create({
     *   data: {
     *     // ... data to create a Reservations
     *   }
     * })
     * 
     */
    create<T extends reservationsCreateArgs>(args: SelectSubset<T, reservationsCreateArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reservations.
     * @param {reservationsCreateManyArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservations = await prisma.reservations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reservationsCreateManyArgs>(args?: SelectSubset<T, reservationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservations.
     * @param {reservationsDeleteArgs} args - Arguments to delete one Reservations.
     * @example
     * // Delete one Reservations
     * const Reservations = await prisma.reservations.delete({
     *   where: {
     *     // ... filter to delete one Reservations
     *   }
     * })
     * 
     */
    delete<T extends reservationsDeleteArgs>(args: SelectSubset<T, reservationsDeleteArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reservations.
     * @param {reservationsUpdateArgs} args - Arguments to update one Reservations.
     * @example
     * // Update one Reservations
     * const reservations = await prisma.reservations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reservationsUpdateArgs>(args: SelectSubset<T, reservationsUpdateArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {reservationsDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reservationsDeleteManyArgs>(args?: SelectSubset<T, reservationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservations = await prisma.reservations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reservationsUpdateManyArgs>(args: SelectSubset<T, reservationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservations.
     * @param {reservationsUpsertArgs} args - Arguments to update or create a Reservations.
     * @example
     * // Update or create a Reservations
     * const reservations = await prisma.reservations.upsert({
     *   create: {
     *     // ... data to create a Reservations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservations we want to update
     *   }
     * })
     */
    upsert<T extends reservationsUpsertArgs>(args: SelectSubset<T, reservationsUpsertArgs<ExtArgs>>): Prisma__reservationsClient<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservations.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends reservationsCountArgs>(
      args?: Subset<T, reservationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationsAggregateArgs>(args: Subset<T, ReservationsAggregateArgs>): Prisma.PrismaPromise<GetReservationsAggregateType<T>>

    /**
     * Group by Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reservationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reservationsGroupByArgs['orderBy'] }
        : { orderBy?: reservationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reservationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reservations model
   */
  readonly fields: reservationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reservations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reservationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends reservations$usersArgs<ExtArgs> = {}>(args?: Subset<T, reservations$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    rooms<T extends reservations$roomsArgs<ExtArgs> = {}>(args?: Subset<T, reservations$roomsArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reservations model
   */ 
  interface reservationsFieldRefs {
    readonly reservation_id: FieldRef<"reservations", 'Int'>
    readonly user_id: FieldRef<"reservations", 'Int'>
    readonly room_id: FieldRef<"reservations", 'Int'>
    readonly check_in_date: FieldRef<"reservations", 'DateTime'>
    readonly check_out_date: FieldRef<"reservations", 'DateTime'>
    readonly person_num: FieldRef<"reservations", 'Int'>
    readonly total_price: FieldRef<"reservations", 'Decimal'>
    readonly status: FieldRef<"reservations", 'String'>
    readonly created_at: FieldRef<"reservations", 'DateTime'>
    readonly updated_at: FieldRef<"reservations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reservations findUnique
   */
  export type reservationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where: reservationsWhereUniqueInput
  }

  /**
   * reservations findUniqueOrThrow
   */
  export type reservationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where: reservationsWhereUniqueInput
  }

  /**
   * reservations findFirst
   */
  export type reservationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where?: reservationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservations.
     */
    cursor?: reservationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservations.
     */
    distinct?: ReservationsScalarFieldEnum | ReservationsScalarFieldEnum[]
  }

  /**
   * reservations findFirstOrThrow
   */
  export type reservationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where?: reservationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservations.
     */
    cursor?: reservationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservations.
     */
    distinct?: ReservationsScalarFieldEnum | ReservationsScalarFieldEnum[]
  }

  /**
   * reservations findMany
   */
  export type reservationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where?: reservationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reservations.
     */
    cursor?: reservationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    distinct?: ReservationsScalarFieldEnum | ReservationsScalarFieldEnum[]
  }

  /**
   * reservations create
   */
  export type reservationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * The data needed to create a reservations.
     */
    data: XOR<reservationsCreateInput, reservationsUncheckedCreateInput>
  }

  /**
   * reservations createMany
   */
  export type reservationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reservations.
     */
    data: reservationsCreateManyInput | reservationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reservations update
   */
  export type reservationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * The data needed to update a reservations.
     */
    data: XOR<reservationsUpdateInput, reservationsUncheckedUpdateInput>
    /**
     * Choose, which reservations to update.
     */
    where: reservationsWhereUniqueInput
  }

  /**
   * reservations updateMany
   */
  export type reservationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reservations.
     */
    data: XOR<reservationsUpdateManyMutationInput, reservationsUncheckedUpdateManyInput>
    /**
     * Filter which reservations to update
     */
    where?: reservationsWhereInput
  }

  /**
   * reservations upsert
   */
  export type reservationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * The filter to search for the reservations to update in case it exists.
     */
    where: reservationsWhereUniqueInput
    /**
     * In case the reservations found by the `where` argument doesn't exist, create a new reservations with this data.
     */
    create: XOR<reservationsCreateInput, reservationsUncheckedCreateInput>
    /**
     * In case the reservations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reservationsUpdateInput, reservationsUncheckedUpdateInput>
  }

  /**
   * reservations delete
   */
  export type reservationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    /**
     * Filter which reservations to delete.
     */
    where: reservationsWhereUniqueInput
  }

  /**
   * reservations deleteMany
   */
  export type reservationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservations to delete
     */
    where?: reservationsWhereInput
  }

  /**
   * reservations.users
   */
  export type reservations$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * reservations.rooms
   */
  export type reservations$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    where?: roomsWhereInput
  }

  /**
   * reservations without action
   */
  export type reservationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
  }


  /**
   * Model reviews
   */

  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    review_id: number | null
    lodging_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    review_id: number | null
    lodging_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    review_id: number | null
    lodging_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type ReviewsMaxAggregateOutputType = {
    review_id: number | null
    lodging_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type ReviewsCountAggregateOutputType = {
    review_id: number
    lodging_id: number
    user_id: number
    rating: number
    comment: number
    created_at: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    review_id?: true
    lodging_id?: true
    user_id?: true
    rating?: true
  }

  export type ReviewsSumAggregateInputType = {
    review_id?: true
    lodging_id?: true
    user_id?: true
    rating?: true
  }

  export type ReviewsMinAggregateInputType = {
    review_id?: true
    lodging_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type ReviewsMaxAggregateInputType = {
    review_id?: true
    lodging_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type ReviewsCountAggregateInputType = {
    review_id?: true
    lodging_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to aggregate.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithAggregationInput | reviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }

  export type ReviewsGroupByOutputType = {
    review_id: number
    lodging_id: number | null
    user_id: number | null
    rating: number
    comment: string | null
    created_at: Date | null
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    review_id?: boolean
    lodging_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
    lodgings?: boolean | reviews$lodgingsArgs<ExtArgs>
    users?: boolean | reviews$usersArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>


  export type reviewsSelectScalar = {
    review_id?: boolean
    lodging_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
  }

  export type reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lodgings?: boolean | reviews$lodgingsArgs<ExtArgs>
    users?: boolean | reviews$usersArgs<ExtArgs>
  }

  export type $reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reviews"
    objects: {
      lodgings: Prisma.$lodgingsPayload<ExtArgs> | null
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      review_id: number
      lodging_id: number | null
      user_id: number | null
      rating: number
      comment: string | null
      created_at: Date | null
    }, ExtArgs["result"]["reviews"]>
    composites: {}
  }

  type reviewsGetPayload<S extends boolean | null | undefined | reviewsDefaultArgs> = $Result.GetResult<Prisma.$reviewsPayload, S>

  type reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reviewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reviews'], meta: { name: 'reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {reviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewsFindUniqueArgs>(args: SelectSubset<T, reviewsFindUniqueArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewsFindFirstArgs>(args?: SelectSubset<T, reviewsFindFirstArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `review_id`
     * const reviewsWithReview_idOnly = await prisma.reviews.findMany({ select: { review_id: true } })
     * 
     */
    findMany<T extends reviewsFindManyArgs>(args?: SelectSubset<T, reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reviews.
     * @param {reviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
     */
    create<T extends reviewsCreateArgs>(args: SelectSubset<T, reviewsCreateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {reviewsCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const reviews = await prisma.reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewsCreateManyArgs>(args?: SelectSubset<T, reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {reviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
     */
    delete<T extends reviewsDeleteArgs>(args: SelectSubset<T, reviewsDeleteArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {reviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewsUpdateArgs>(args: SelectSubset<T, reviewsUpdateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewsDeleteManyArgs>(args?: SelectSubset<T, reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewsUpdateManyArgs>(args: SelectSubset<T, reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {reviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
     */
    upsert<T extends reviewsUpsertArgs>(args: SelectSubset<T, reviewsUpsertArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewsCountArgs>(
      args?: Subset<T, reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewsGroupByArgs['orderBy'] }
        : { orderBy?: reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reviews model
   */
  readonly fields: reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lodgings<T extends reviews$lodgingsArgs<ExtArgs> = {}>(args?: Subset<T, reviews$lodgingsArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends reviews$usersArgs<ExtArgs> = {}>(args?: Subset<T, reviews$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reviews model
   */ 
  interface reviewsFieldRefs {
    readonly review_id: FieldRef<"reviews", 'Int'>
    readonly lodging_id: FieldRef<"reviews", 'Int'>
    readonly user_id: FieldRef<"reviews", 'Int'>
    readonly rating: FieldRef<"reviews", 'Int'>
    readonly comment: FieldRef<"reviews", 'String'>
    readonly created_at: FieldRef<"reviews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reviews findUnique
   */
  export type reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findUniqueOrThrow
   */
  export type reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findFirst
   */
  export type reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findFirstOrThrow
   */
  export type reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findMany
   */
  export type reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews create
   */
  export type reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a reviews.
     */
    data: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
  }

  /**
   * reviews createMany
   */
  export type reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reviews update
   */
  export type reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a reviews.
     */
    data: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
    /**
     * Choose, which reviews to update.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews updateMany
   */
  export type reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews upsert
   */
  export type reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the reviews to update in case it exists.
     */
    where: reviewsWhereUniqueInput
    /**
     * In case the reviews found by the `where` argument doesn't exist, create a new reviews with this data.
     */
    create: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
    /**
     * In case the reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
  }

  /**
   * reviews delete
   */
  export type reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter which reviews to delete.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews deleteMany
   */
  export type reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews.lodgings
   */
  export type reviews$lodgingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    where?: lodgingsWhereInput
  }

  /**
   * reviews.users
   */
  export type reviews$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * reviews without action
   */
  export type reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
  }


  /**
   * Model room_photos
   */

  export type AggregateRoom_photos = {
    _count: Room_photosCountAggregateOutputType | null
    _avg: Room_photosAvgAggregateOutputType | null
    _sum: Room_photosSumAggregateOutputType | null
    _min: Room_photosMinAggregateOutputType | null
    _max: Room_photosMaxAggregateOutputType | null
  }

  export type Room_photosAvgAggregateOutputType = {
    photo_id: number | null
    room_id: number | null
  }

  export type Room_photosSumAggregateOutputType = {
    photo_id: number | null
    room_id: number | null
  }

  export type Room_photosMinAggregateOutputType = {
    photo_id: number | null
    room_id: number | null
    photo_url: string | null
  }

  export type Room_photosMaxAggregateOutputType = {
    photo_id: number | null
    room_id: number | null
    photo_url: string | null
  }

  export type Room_photosCountAggregateOutputType = {
    photo_id: number
    room_id: number
    photo_url: number
    _all: number
  }


  export type Room_photosAvgAggregateInputType = {
    photo_id?: true
    room_id?: true
  }

  export type Room_photosSumAggregateInputType = {
    photo_id?: true
    room_id?: true
  }

  export type Room_photosMinAggregateInputType = {
    photo_id?: true
    room_id?: true
    photo_url?: true
  }

  export type Room_photosMaxAggregateInputType = {
    photo_id?: true
    room_id?: true
    photo_url?: true
  }

  export type Room_photosCountAggregateInputType = {
    photo_id?: true
    room_id?: true
    photo_url?: true
    _all?: true
  }

  export type Room_photosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_photos to aggregate.
     */
    where?: room_photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_photos to fetch.
     */
    orderBy?: room_photosOrderByWithRelationInput | room_photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: room_photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned room_photos
    **/
    _count?: true | Room_photosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Room_photosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Room_photosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Room_photosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Room_photosMaxAggregateInputType
  }

  export type GetRoom_photosAggregateType<T extends Room_photosAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom_photos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom_photos[P]>
      : GetScalarType<T[P], AggregateRoom_photos[P]>
  }




  export type room_photosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: room_photosWhereInput
    orderBy?: room_photosOrderByWithAggregationInput | room_photosOrderByWithAggregationInput[]
    by: Room_photosScalarFieldEnum[] | Room_photosScalarFieldEnum
    having?: room_photosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Room_photosCountAggregateInputType | true
    _avg?: Room_photosAvgAggregateInputType
    _sum?: Room_photosSumAggregateInputType
    _min?: Room_photosMinAggregateInputType
    _max?: Room_photosMaxAggregateInputType
  }

  export type Room_photosGroupByOutputType = {
    photo_id: number
    room_id: number | null
    photo_url: string
    _count: Room_photosCountAggregateOutputType | null
    _avg: Room_photosAvgAggregateOutputType | null
    _sum: Room_photosSumAggregateOutputType | null
    _min: Room_photosMinAggregateOutputType | null
    _max: Room_photosMaxAggregateOutputType | null
  }

  type GetRoom_photosGroupByPayload<T extends room_photosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Room_photosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Room_photosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Room_photosGroupByOutputType[P]>
            : GetScalarType<T[P], Room_photosGroupByOutputType[P]>
        }
      >
    >


  export type room_photosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    photo_id?: boolean
    room_id?: boolean
    photo_url?: boolean
    rooms?: boolean | room_photos$roomsArgs<ExtArgs>
  }, ExtArgs["result"]["room_photos"]>


  export type room_photosSelectScalar = {
    photo_id?: boolean
    room_id?: boolean
    photo_url?: boolean
  }

  export type room_photosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | room_photos$roomsArgs<ExtArgs>
  }

  export type $room_photosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "room_photos"
    objects: {
      rooms: Prisma.$roomsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      photo_id: number
      room_id: number | null
      photo_url: string
    }, ExtArgs["result"]["room_photos"]>
    composites: {}
  }

  type room_photosGetPayload<S extends boolean | null | undefined | room_photosDefaultArgs> = $Result.GetResult<Prisma.$room_photosPayload, S>

  type room_photosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<room_photosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Room_photosCountAggregateInputType | true
    }

  export interface room_photosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['room_photos'], meta: { name: 'room_photos' } }
    /**
     * Find zero or one Room_photos that matches the filter.
     * @param {room_photosFindUniqueArgs} args - Arguments to find a Room_photos
     * @example
     * // Get one Room_photos
     * const room_photos = await prisma.room_photos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends room_photosFindUniqueArgs>(args: SelectSubset<T, room_photosFindUniqueArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Room_photos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {room_photosFindUniqueOrThrowArgs} args - Arguments to find a Room_photos
     * @example
     * // Get one Room_photos
     * const room_photos = await prisma.room_photos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends room_photosFindUniqueOrThrowArgs>(args: SelectSubset<T, room_photosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Room_photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosFindFirstArgs} args - Arguments to find a Room_photos
     * @example
     * // Get one Room_photos
     * const room_photos = await prisma.room_photos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends room_photosFindFirstArgs>(args?: SelectSubset<T, room_photosFindFirstArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Room_photos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosFindFirstOrThrowArgs} args - Arguments to find a Room_photos
     * @example
     * // Get one Room_photos
     * const room_photos = await prisma.room_photos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends room_photosFindFirstOrThrowArgs>(args?: SelectSubset<T, room_photosFindFirstOrThrowArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Room_photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Room_photos
     * const room_photos = await prisma.room_photos.findMany()
     * 
     * // Get first 10 Room_photos
     * const room_photos = await prisma.room_photos.findMany({ take: 10 })
     * 
     * // Only select the `photo_id`
     * const room_photosWithPhoto_idOnly = await prisma.room_photos.findMany({ select: { photo_id: true } })
     * 
     */
    findMany<T extends room_photosFindManyArgs>(args?: SelectSubset<T, room_photosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Room_photos.
     * @param {room_photosCreateArgs} args - Arguments to create a Room_photos.
     * @example
     * // Create one Room_photos
     * const Room_photos = await prisma.room_photos.create({
     *   data: {
     *     // ... data to create a Room_photos
     *   }
     * })
     * 
     */
    create<T extends room_photosCreateArgs>(args: SelectSubset<T, room_photosCreateArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Room_photos.
     * @param {room_photosCreateManyArgs} args - Arguments to create many Room_photos.
     * @example
     * // Create many Room_photos
     * const room_photos = await prisma.room_photos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends room_photosCreateManyArgs>(args?: SelectSubset<T, room_photosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Room_photos.
     * @param {room_photosDeleteArgs} args - Arguments to delete one Room_photos.
     * @example
     * // Delete one Room_photos
     * const Room_photos = await prisma.room_photos.delete({
     *   where: {
     *     // ... filter to delete one Room_photos
     *   }
     * })
     * 
     */
    delete<T extends room_photosDeleteArgs>(args: SelectSubset<T, room_photosDeleteArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Room_photos.
     * @param {room_photosUpdateArgs} args - Arguments to update one Room_photos.
     * @example
     * // Update one Room_photos
     * const room_photos = await prisma.room_photos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends room_photosUpdateArgs>(args: SelectSubset<T, room_photosUpdateArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Room_photos.
     * @param {room_photosDeleteManyArgs} args - Arguments to filter Room_photos to delete.
     * @example
     * // Delete a few Room_photos
     * const { count } = await prisma.room_photos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends room_photosDeleteManyArgs>(args?: SelectSubset<T, room_photosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Room_photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Room_photos
     * const room_photos = await prisma.room_photos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends room_photosUpdateManyArgs>(args: SelectSubset<T, room_photosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room_photos.
     * @param {room_photosUpsertArgs} args - Arguments to update or create a Room_photos.
     * @example
     * // Update or create a Room_photos
     * const room_photos = await prisma.room_photos.upsert({
     *   create: {
     *     // ... data to create a Room_photos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room_photos we want to update
     *   }
     * })
     */
    upsert<T extends room_photosUpsertArgs>(args: SelectSubset<T, room_photosUpsertArgs<ExtArgs>>): Prisma__room_photosClient<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Room_photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosCountArgs} args - Arguments to filter Room_photos to count.
     * @example
     * // Count the number of Room_photos
     * const count = await prisma.room_photos.count({
     *   where: {
     *     // ... the filter for the Room_photos we want to count
     *   }
     * })
    **/
    count<T extends room_photosCountArgs>(
      args?: Subset<T, room_photosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Room_photosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room_photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Room_photosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Room_photosAggregateArgs>(args: Subset<T, Room_photosAggregateArgs>): Prisma.PrismaPromise<GetRoom_photosAggregateType<T>>

    /**
     * Group by Room_photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_photosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends room_photosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: room_photosGroupByArgs['orderBy'] }
        : { orderBy?: room_photosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, room_photosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoom_photosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the room_photos model
   */
  readonly fields: room_photosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for room_photos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__room_photosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends room_photos$roomsArgs<ExtArgs> = {}>(args?: Subset<T, room_photos$roomsArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the room_photos model
   */ 
  interface room_photosFieldRefs {
    readonly photo_id: FieldRef<"room_photos", 'Int'>
    readonly room_id: FieldRef<"room_photos", 'Int'>
    readonly photo_url: FieldRef<"room_photos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * room_photos findUnique
   */
  export type room_photosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter, which room_photos to fetch.
     */
    where: room_photosWhereUniqueInput
  }

  /**
   * room_photos findUniqueOrThrow
   */
  export type room_photosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter, which room_photos to fetch.
     */
    where: room_photosWhereUniqueInput
  }

  /**
   * room_photos findFirst
   */
  export type room_photosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter, which room_photos to fetch.
     */
    where?: room_photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_photos to fetch.
     */
    orderBy?: room_photosOrderByWithRelationInput | room_photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_photos.
     */
    cursor?: room_photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_photos.
     */
    distinct?: Room_photosScalarFieldEnum | Room_photosScalarFieldEnum[]
  }

  /**
   * room_photos findFirstOrThrow
   */
  export type room_photosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter, which room_photos to fetch.
     */
    where?: room_photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_photos to fetch.
     */
    orderBy?: room_photosOrderByWithRelationInput | room_photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_photos.
     */
    cursor?: room_photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_photos.
     */
    distinct?: Room_photosScalarFieldEnum | Room_photosScalarFieldEnum[]
  }

  /**
   * room_photos findMany
   */
  export type room_photosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter, which room_photos to fetch.
     */
    where?: room_photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_photos to fetch.
     */
    orderBy?: room_photosOrderByWithRelationInput | room_photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing room_photos.
     */
    cursor?: room_photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_photos.
     */
    skip?: number
    distinct?: Room_photosScalarFieldEnum | Room_photosScalarFieldEnum[]
  }

  /**
   * room_photos create
   */
  export type room_photosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * The data needed to create a room_photos.
     */
    data: XOR<room_photosCreateInput, room_photosUncheckedCreateInput>
  }

  /**
   * room_photos createMany
   */
  export type room_photosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many room_photos.
     */
    data: room_photosCreateManyInput | room_photosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * room_photos update
   */
  export type room_photosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * The data needed to update a room_photos.
     */
    data: XOR<room_photosUpdateInput, room_photosUncheckedUpdateInput>
    /**
     * Choose, which room_photos to update.
     */
    where: room_photosWhereUniqueInput
  }

  /**
   * room_photos updateMany
   */
  export type room_photosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update room_photos.
     */
    data: XOR<room_photosUpdateManyMutationInput, room_photosUncheckedUpdateManyInput>
    /**
     * Filter which room_photos to update
     */
    where?: room_photosWhereInput
  }

  /**
   * room_photos upsert
   */
  export type room_photosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * The filter to search for the room_photos to update in case it exists.
     */
    where: room_photosWhereUniqueInput
    /**
     * In case the room_photos found by the `where` argument doesn't exist, create a new room_photos with this data.
     */
    create: XOR<room_photosCreateInput, room_photosUncheckedCreateInput>
    /**
     * In case the room_photos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<room_photosUpdateInput, room_photosUncheckedUpdateInput>
  }

  /**
   * room_photos delete
   */
  export type room_photosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    /**
     * Filter which room_photos to delete.
     */
    where: room_photosWhereUniqueInput
  }

  /**
   * room_photos deleteMany
   */
  export type room_photosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_photos to delete
     */
    where?: room_photosWhereInput
  }

  /**
   * room_photos.rooms
   */
  export type room_photos$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    where?: roomsWhereInput
  }

  /**
   * room_photos without action
   */
  export type room_photosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
  }


  /**
   * Model rooms
   */

  export type AggregateRooms = {
    _count: RoomsCountAggregateOutputType | null
    _avg: RoomsAvgAggregateOutputType | null
    _sum: RoomsSumAggregateOutputType | null
    _min: RoomsMinAggregateOutputType | null
    _max: RoomsMaxAggregateOutputType | null
  }

  export type RoomsAvgAggregateOutputType = {
    room_id: number | null
    lodging_id: number | null
    room_count: number | null
    price_per_night: Decimal | null
    min_occupancy: number | null
    max_occupancy: number | null
  }

  export type RoomsSumAggregateOutputType = {
    room_id: number | null
    lodging_id: number | null
    room_count: number | null
    price_per_night: Decimal | null
    min_occupancy: number | null
    max_occupancy: number | null
  }

  export type RoomsMinAggregateOutputType = {
    room_id: number | null
    lodging_id: number | null
    room_name: string | null
    room_count: number | null
    price_per_night: Decimal | null
    min_occupancy: number | null
    max_occupancy: number | null
  }

  export type RoomsMaxAggregateOutputType = {
    room_id: number | null
    lodging_id: number | null
    room_name: string | null
    room_count: number | null
    price_per_night: Decimal | null
    min_occupancy: number | null
    max_occupancy: number | null
  }

  export type RoomsCountAggregateOutputType = {
    room_id: number
    lodging_id: number
    room_name: number
    room_count: number
    price_per_night: number
    min_occupancy: number
    max_occupancy: number
    _all: number
  }


  export type RoomsAvgAggregateInputType = {
    room_id?: true
    lodging_id?: true
    room_count?: true
    price_per_night?: true
    min_occupancy?: true
    max_occupancy?: true
  }

  export type RoomsSumAggregateInputType = {
    room_id?: true
    lodging_id?: true
    room_count?: true
    price_per_night?: true
    min_occupancy?: true
    max_occupancy?: true
  }

  export type RoomsMinAggregateInputType = {
    room_id?: true
    lodging_id?: true
    room_name?: true
    room_count?: true
    price_per_night?: true
    min_occupancy?: true
    max_occupancy?: true
  }

  export type RoomsMaxAggregateInputType = {
    room_id?: true
    lodging_id?: true
    room_name?: true
    room_count?: true
    price_per_night?: true
    min_occupancy?: true
    max_occupancy?: true
  }

  export type RoomsCountAggregateInputType = {
    room_id?: true
    lodging_id?: true
    room_name?: true
    room_count?: true
    price_per_night?: true
    min_occupancy?: true
    max_occupancy?: true
    _all?: true
  }

  export type RoomsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rooms to aggregate.
     */
    where?: roomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomsOrderByWithRelationInput | roomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rooms
    **/
    _count?: true | RoomsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomsMaxAggregateInputType
  }

  export type GetRoomsAggregateType<T extends RoomsAggregateArgs> = {
        [P in keyof T & keyof AggregateRooms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRooms[P]>
      : GetScalarType<T[P], AggregateRooms[P]>
  }




  export type roomsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roomsWhereInput
    orderBy?: roomsOrderByWithAggregationInput | roomsOrderByWithAggregationInput[]
    by: RoomsScalarFieldEnum[] | RoomsScalarFieldEnum
    having?: roomsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomsCountAggregateInputType | true
    _avg?: RoomsAvgAggregateInputType
    _sum?: RoomsSumAggregateInputType
    _min?: RoomsMinAggregateInputType
    _max?: RoomsMaxAggregateInputType
  }

  export type RoomsGroupByOutputType = {
    room_id: number
    lodging_id: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal
    min_occupancy: number
    max_occupancy: number
    _count: RoomsCountAggregateOutputType | null
    _avg: RoomsAvgAggregateOutputType | null
    _sum: RoomsSumAggregateOutputType | null
    _min: RoomsMinAggregateOutputType | null
    _max: RoomsMaxAggregateOutputType | null
  }

  type GetRoomsGroupByPayload<T extends roomsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomsGroupByOutputType[P]>
            : GetScalarType<T[P], RoomsGroupByOutputType[P]>
        }
      >
    >


  export type roomsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    room_id?: boolean
    lodging_id?: boolean
    room_name?: boolean
    room_count?: boolean
    price_per_night?: boolean
    min_occupancy?: boolean
    max_occupancy?: boolean
    facilities?: boolean | rooms$facilitiesArgs<ExtArgs>
    reservations?: boolean | rooms$reservationsArgs<ExtArgs>
    room_photos?: boolean | rooms$room_photosArgs<ExtArgs>
    lodgings?: boolean | rooms$lodgingsArgs<ExtArgs>
    _count?: boolean | RoomsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rooms"]>


  export type roomsSelectScalar = {
    room_id?: boolean
    lodging_id?: boolean
    room_name?: boolean
    room_count?: boolean
    price_per_night?: boolean
    min_occupancy?: boolean
    max_occupancy?: boolean
  }

  export type roomsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facilities?: boolean | rooms$facilitiesArgs<ExtArgs>
    reservations?: boolean | rooms$reservationsArgs<ExtArgs>
    room_photos?: boolean | rooms$room_photosArgs<ExtArgs>
    lodgings?: boolean | rooms$lodgingsArgs<ExtArgs>
    _count?: boolean | RoomsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $roomsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rooms"
    objects: {
      facilities: Prisma.$facilitiesPayload<ExtArgs>[]
      reservations: Prisma.$reservationsPayload<ExtArgs>[]
      room_photos: Prisma.$room_photosPayload<ExtArgs>[]
      lodgings: Prisma.$lodgingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      room_id: number
      lodging_id: number | null
      room_name: string
      room_count: number
      price_per_night: Prisma.Decimal
      min_occupancy: number
      max_occupancy: number
    }, ExtArgs["result"]["rooms"]>
    composites: {}
  }

  type roomsGetPayload<S extends boolean | null | undefined | roomsDefaultArgs> = $Result.GetResult<Prisma.$roomsPayload, S>

  type roomsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<roomsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoomsCountAggregateInputType | true
    }

  export interface roomsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rooms'], meta: { name: 'rooms' } }
    /**
     * Find zero or one Rooms that matches the filter.
     * @param {roomsFindUniqueArgs} args - Arguments to find a Rooms
     * @example
     * // Get one Rooms
     * const rooms = await prisma.rooms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends roomsFindUniqueArgs>(args: SelectSubset<T, roomsFindUniqueArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rooms that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {roomsFindUniqueOrThrowArgs} args - Arguments to find a Rooms
     * @example
     * // Get one Rooms
     * const rooms = await prisma.rooms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends roomsFindUniqueOrThrowArgs>(args: SelectSubset<T, roomsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsFindFirstArgs} args - Arguments to find a Rooms
     * @example
     * // Get one Rooms
     * const rooms = await prisma.rooms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends roomsFindFirstArgs>(args?: SelectSubset<T, roomsFindFirstArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rooms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsFindFirstOrThrowArgs} args - Arguments to find a Rooms
     * @example
     * // Get one Rooms
     * const rooms = await prisma.rooms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends roomsFindFirstOrThrowArgs>(args?: SelectSubset<T, roomsFindFirstOrThrowArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.rooms.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.rooms.findMany({ take: 10 })
     * 
     * // Only select the `room_id`
     * const roomsWithRoom_idOnly = await prisma.rooms.findMany({ select: { room_id: true } })
     * 
     */
    findMany<T extends roomsFindManyArgs>(args?: SelectSubset<T, roomsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rooms.
     * @param {roomsCreateArgs} args - Arguments to create a Rooms.
     * @example
     * // Create one Rooms
     * const Rooms = await prisma.rooms.create({
     *   data: {
     *     // ... data to create a Rooms
     *   }
     * })
     * 
     */
    create<T extends roomsCreateArgs>(args: SelectSubset<T, roomsCreateArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rooms.
     * @param {roomsCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const rooms = await prisma.rooms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends roomsCreateManyArgs>(args?: SelectSubset<T, roomsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rooms.
     * @param {roomsDeleteArgs} args - Arguments to delete one Rooms.
     * @example
     * // Delete one Rooms
     * const Rooms = await prisma.rooms.delete({
     *   where: {
     *     // ... filter to delete one Rooms
     *   }
     * })
     * 
     */
    delete<T extends roomsDeleteArgs>(args: SelectSubset<T, roomsDeleteArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rooms.
     * @param {roomsUpdateArgs} args - Arguments to update one Rooms.
     * @example
     * // Update one Rooms
     * const rooms = await prisma.rooms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends roomsUpdateArgs>(args: SelectSubset<T, roomsUpdateArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rooms.
     * @param {roomsDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.rooms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends roomsDeleteManyArgs>(args?: SelectSubset<T, roomsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const rooms = await prisma.rooms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends roomsUpdateManyArgs>(args: SelectSubset<T, roomsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rooms.
     * @param {roomsUpsertArgs} args - Arguments to update or create a Rooms.
     * @example
     * // Update or create a Rooms
     * const rooms = await prisma.rooms.upsert({
     *   create: {
     *     // ... data to create a Rooms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rooms we want to update
     *   }
     * })
     */
    upsert<T extends roomsUpsertArgs>(args: SelectSubset<T, roomsUpsertArgs<ExtArgs>>): Prisma__roomsClient<$Result.GetResult<Prisma.$roomsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.rooms.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends roomsCountArgs>(
      args?: Subset<T, roomsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomsAggregateArgs>(args: Subset<T, RoomsAggregateArgs>): Prisma.PrismaPromise<GetRoomsAggregateType<T>>

    /**
     * Group by Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roomsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roomsGroupByArgs['orderBy'] }
        : { orderBy?: roomsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roomsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rooms model
   */
  readonly fields: roomsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rooms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roomsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facilities<T extends rooms$facilitiesArgs<ExtArgs> = {}>(args?: Subset<T, rooms$facilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facilitiesPayload<ExtArgs>, T, "findMany"> | Null>
    reservations<T extends rooms$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, rooms$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findMany"> | Null>
    room_photos<T extends rooms$room_photosArgs<ExtArgs> = {}>(args?: Subset<T, rooms$room_photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_photosPayload<ExtArgs>, T, "findMany"> | Null>
    lodgings<T extends rooms$lodgingsArgs<ExtArgs> = {}>(args?: Subset<T, rooms$lodgingsArgs<ExtArgs>>): Prisma__lodgingsClient<$Result.GetResult<Prisma.$lodgingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rooms model
   */ 
  interface roomsFieldRefs {
    readonly room_id: FieldRef<"rooms", 'Int'>
    readonly lodging_id: FieldRef<"rooms", 'Int'>
    readonly room_name: FieldRef<"rooms", 'String'>
    readonly room_count: FieldRef<"rooms", 'Int'>
    readonly price_per_night: FieldRef<"rooms", 'Decimal'>
    readonly min_occupancy: FieldRef<"rooms", 'Int'>
    readonly max_occupancy: FieldRef<"rooms", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * rooms findUnique
   */
  export type roomsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where: roomsWhereUniqueInput
  }

  /**
   * rooms findUniqueOrThrow
   */
  export type roomsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where: roomsWhereUniqueInput
  }

  /**
   * rooms findFirst
   */
  export type roomsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where?: roomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomsOrderByWithRelationInput | roomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rooms.
     */
    cursor?: roomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rooms.
     */
    distinct?: RoomsScalarFieldEnum | RoomsScalarFieldEnum[]
  }

  /**
   * rooms findFirstOrThrow
   */
  export type roomsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where?: roomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomsOrderByWithRelationInput | roomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rooms.
     */
    cursor?: roomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rooms.
     */
    distinct?: RoomsScalarFieldEnum | RoomsScalarFieldEnum[]
  }

  /**
   * rooms findMany
   */
  export type roomsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where?: roomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomsOrderByWithRelationInput | roomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rooms.
     */
    cursor?: roomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    distinct?: RoomsScalarFieldEnum | RoomsScalarFieldEnum[]
  }

  /**
   * rooms create
   */
  export type roomsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * The data needed to create a rooms.
     */
    data: XOR<roomsCreateInput, roomsUncheckedCreateInput>
  }

  /**
   * rooms createMany
   */
  export type roomsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rooms.
     */
    data: roomsCreateManyInput | roomsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rooms update
   */
  export type roomsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * The data needed to update a rooms.
     */
    data: XOR<roomsUpdateInput, roomsUncheckedUpdateInput>
    /**
     * Choose, which rooms to update.
     */
    where: roomsWhereUniqueInput
  }

  /**
   * rooms updateMany
   */
  export type roomsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rooms.
     */
    data: XOR<roomsUpdateManyMutationInput, roomsUncheckedUpdateManyInput>
    /**
     * Filter which rooms to update
     */
    where?: roomsWhereInput
  }

  /**
   * rooms upsert
   */
  export type roomsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * The filter to search for the rooms to update in case it exists.
     */
    where: roomsWhereUniqueInput
    /**
     * In case the rooms found by the `where` argument doesn't exist, create a new rooms with this data.
     */
    create: XOR<roomsCreateInput, roomsUncheckedCreateInput>
    /**
     * In case the rooms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roomsUpdateInput, roomsUncheckedUpdateInput>
  }

  /**
   * rooms delete
   */
  export type roomsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
    /**
     * Filter which rooms to delete.
     */
    where: roomsWhereUniqueInput
  }

  /**
   * rooms deleteMany
   */
  export type roomsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rooms to delete
     */
    where?: roomsWhereInput
  }

  /**
   * rooms.facilities
   */
  export type rooms$facilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the facilities
     */
    select?: facilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facilitiesInclude<ExtArgs> | null
    where?: facilitiesWhereInput
    orderBy?: facilitiesOrderByWithRelationInput | facilitiesOrderByWithRelationInput[]
    cursor?: facilitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacilitiesScalarFieldEnum | FacilitiesScalarFieldEnum[]
  }

  /**
   * rooms.reservations
   */
  export type rooms$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    where?: reservationsWhereInput
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    cursor?: reservationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationsScalarFieldEnum | ReservationsScalarFieldEnum[]
  }

  /**
   * rooms.room_photos
   */
  export type rooms$room_photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_photos
     */
    select?: room_photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_photosInclude<ExtArgs> | null
    where?: room_photosWhereInput
    orderBy?: room_photosOrderByWithRelationInput | room_photosOrderByWithRelationInput[]
    cursor?: room_photosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Room_photosScalarFieldEnum | Room_photosScalarFieldEnum[]
  }

  /**
   * rooms.lodgings
   */
  export type rooms$lodgingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lodgings
     */
    select?: lodgingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lodgingsInclude<ExtArgs> | null
    where?: lodgingsWhereInput
  }

  /**
   * rooms without action
   */
  export type roomsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rooms
     */
    select?: roomsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    user_name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    created_at: Date | null
    updated_at: Date | null
    permission: string | null
    birth: Date | null
    gender: string | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    user_name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    created_at: Date | null
    updated_at: Date | null
    permission: string | null
    birth: Date | null
    gender: string | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    user_name: number
    email: number
    password: number
    phone_number: number
    created_at: number
    updated_at: number
    permission: number
    birth: number
    gender: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    user_name?: true
    email?: true
    password?: true
    phone_number?: true
    created_at?: true
    updated_at?: true
    permission?: true
    birth?: true
    gender?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    user_name?: true
    email?: true
    password?: true
    phone_number?: true
    created_at?: true
    updated_at?: true
    permission?: true
    birth?: true
    gender?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    user_name?: true
    email?: true
    password?: true
    phone_number?: true
    created_at?: true
    updated_at?: true
    permission?: true
    birth?: true
    gender?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at: Date | null
    updated_at: Date | null
    permission: string
    birth: Date
    gender: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    user_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    created_at?: boolean
    updated_at?: boolean
    permission?: boolean
    birth?: boolean
    gender?: boolean
    reservations?: boolean | users$reservationsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    user_id?: boolean
    user_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    created_at?: boolean
    updated_at?: boolean
    permission?: boolean
    birth?: boolean
    gender?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | users$reservationsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      reservations: Prisma.$reservationsPayload<ExtArgs>[]
      reviews: Prisma.$reviewsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      user_name: string
      email: string
      password: string
      phone_number: string
      created_at: Date | null
      updated_at: Date | null
      permission: string
      birth: Date
      gender: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservations<T extends users$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, users$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationsPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends users$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, users$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly user_name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly phone_number: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly permission: FieldRef<"users", 'String'>
    readonly birth: FieldRef<"users", 'DateTime'>
    readonly gender: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.reservations
   */
  export type users$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservations
     */
    select?: reservationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationsInclude<ExtArgs> | null
    where?: reservationsWhereInput
    orderBy?: reservationsOrderByWithRelationInput | reservationsOrderByWithRelationInput[]
    cursor?: reservationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationsScalarFieldEnum | ReservationsScalarFieldEnum[]
  }

  /**
   * users.reviews
   */
  export type users$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FacilitiesScalarFieldEnum: {
    facility_id: 'facility_id',
    room_id: 'room_id',
    has_bathfacility: 'has_bathfacility',
    has_bath: 'has_bath',
    has_home_theater: 'has_home_theater',
    has_air_conditioning: 'has_air_conditioning',
    has_tv: 'has_tv',
    has_pc: 'has_pc',
    cable: 'cable',
    has_internet: 'has_internet',
    has_refrigerator: 'has_refrigerator',
    has_toiletries: 'has_toiletries',
    has_sofa: 'has_sofa',
    has_cook: 'has_cook',
    has_table: 'has_table',
    hairdryer: 'hairdryer'
  };

  export type FacilitiesScalarFieldEnum = (typeof FacilitiesScalarFieldEnum)[keyof typeof FacilitiesScalarFieldEnum]


  export const LodgingsScalarFieldEnum: {
    lodging_id: 'lodging_id',
    name: 'name',
    part: 'part',
    area: 'area',
    sigungu: 'sigungu',
    address: 'address',
    rating: 'rating',
    tel: 'tel',
    main_image: 'main_image',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LodgingsScalarFieldEnum = (typeof LodgingsScalarFieldEnum)[keyof typeof LodgingsScalarFieldEnum]


  export const ReservationsScalarFieldEnum: {
    reservation_id: 'reservation_id',
    user_id: 'user_id',
    room_id: 'room_id',
    check_in_date: 'check_in_date',
    check_out_date: 'check_out_date',
    person_num: 'person_num',
    total_price: 'total_price',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ReservationsScalarFieldEnum = (typeof ReservationsScalarFieldEnum)[keyof typeof ReservationsScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    review_id: 'review_id',
    lodging_id: 'lodging_id',
    user_id: 'user_id',
    rating: 'rating',
    comment: 'comment',
    created_at: 'created_at'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const Room_photosScalarFieldEnum: {
    photo_id: 'photo_id',
    room_id: 'room_id',
    photo_url: 'photo_url'
  };

  export type Room_photosScalarFieldEnum = (typeof Room_photosScalarFieldEnum)[keyof typeof Room_photosScalarFieldEnum]


  export const RoomsScalarFieldEnum: {
    room_id: 'room_id',
    lodging_id: 'lodging_id',
    room_name: 'room_name',
    room_count: 'room_count',
    price_per_night: 'price_per_night',
    min_occupancy: 'min_occupancy',
    max_occupancy: 'max_occupancy'
  };

  export type RoomsScalarFieldEnum = (typeof RoomsScalarFieldEnum)[keyof typeof RoomsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    user_name: 'user_name',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number',
    created_at: 'created_at',
    updated_at: 'updated_at',
    permission: 'permission',
    birth: 'birth',
    gender: 'gender'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type facilitiesWhereInput = {
    AND?: facilitiesWhereInput | facilitiesWhereInput[]
    OR?: facilitiesWhereInput[]
    NOT?: facilitiesWhereInput | facilitiesWhereInput[]
    facility_id?: IntFilter<"facilities"> | number
    room_id?: IntNullableFilter<"facilities"> | number | null
    has_bathfacility?: BoolNullableFilter<"facilities"> | boolean | null
    has_bath?: IntNullableFilter<"facilities"> | number | null
    has_home_theater?: BoolNullableFilter<"facilities"> | boolean | null
    has_air_conditioning?: BoolNullableFilter<"facilities"> | boolean | null
    has_tv?: BoolNullableFilter<"facilities"> | boolean | null
    has_pc?: BoolNullableFilter<"facilities"> | boolean | null
    cable?: BoolNullableFilter<"facilities"> | boolean | null
    has_internet?: BoolNullableFilter<"facilities"> | boolean | null
    has_refrigerator?: BoolNullableFilter<"facilities"> | boolean | null
    has_toiletries?: BoolNullableFilter<"facilities"> | boolean | null
    has_sofa?: BoolNullableFilter<"facilities"> | boolean | null
    has_cook?: BoolNullableFilter<"facilities"> | boolean | null
    has_table?: BoolNullableFilter<"facilities"> | boolean | null
    hairdryer?: BoolNullableFilter<"facilities"> | boolean | null
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }

  export type facilitiesOrderByWithRelationInput = {
    facility_id?: SortOrder
    room_id?: SortOrderInput | SortOrder
    has_bathfacility?: SortOrderInput | SortOrder
    has_bath?: SortOrderInput | SortOrder
    has_home_theater?: SortOrderInput | SortOrder
    has_air_conditioning?: SortOrderInput | SortOrder
    has_tv?: SortOrderInput | SortOrder
    has_pc?: SortOrderInput | SortOrder
    cable?: SortOrderInput | SortOrder
    has_internet?: SortOrderInput | SortOrder
    has_refrigerator?: SortOrderInput | SortOrder
    has_toiletries?: SortOrderInput | SortOrder
    has_sofa?: SortOrderInput | SortOrder
    has_cook?: SortOrderInput | SortOrder
    has_table?: SortOrderInput | SortOrder
    hairdryer?: SortOrderInput | SortOrder
    rooms?: roomsOrderByWithRelationInput
  }

  export type facilitiesWhereUniqueInput = Prisma.AtLeast<{
    facility_id?: number
    AND?: facilitiesWhereInput | facilitiesWhereInput[]
    OR?: facilitiesWhereInput[]
    NOT?: facilitiesWhereInput | facilitiesWhereInput[]
    room_id?: IntNullableFilter<"facilities"> | number | null
    has_bathfacility?: BoolNullableFilter<"facilities"> | boolean | null
    has_bath?: IntNullableFilter<"facilities"> | number | null
    has_home_theater?: BoolNullableFilter<"facilities"> | boolean | null
    has_air_conditioning?: BoolNullableFilter<"facilities"> | boolean | null
    has_tv?: BoolNullableFilter<"facilities"> | boolean | null
    has_pc?: BoolNullableFilter<"facilities"> | boolean | null
    cable?: BoolNullableFilter<"facilities"> | boolean | null
    has_internet?: BoolNullableFilter<"facilities"> | boolean | null
    has_refrigerator?: BoolNullableFilter<"facilities"> | boolean | null
    has_toiletries?: BoolNullableFilter<"facilities"> | boolean | null
    has_sofa?: BoolNullableFilter<"facilities"> | boolean | null
    has_cook?: BoolNullableFilter<"facilities"> | boolean | null
    has_table?: BoolNullableFilter<"facilities"> | boolean | null
    hairdryer?: BoolNullableFilter<"facilities"> | boolean | null
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }, "facility_id">

  export type facilitiesOrderByWithAggregationInput = {
    facility_id?: SortOrder
    room_id?: SortOrderInput | SortOrder
    has_bathfacility?: SortOrderInput | SortOrder
    has_bath?: SortOrderInput | SortOrder
    has_home_theater?: SortOrderInput | SortOrder
    has_air_conditioning?: SortOrderInput | SortOrder
    has_tv?: SortOrderInput | SortOrder
    has_pc?: SortOrderInput | SortOrder
    cable?: SortOrderInput | SortOrder
    has_internet?: SortOrderInput | SortOrder
    has_refrigerator?: SortOrderInput | SortOrder
    has_toiletries?: SortOrderInput | SortOrder
    has_sofa?: SortOrderInput | SortOrder
    has_cook?: SortOrderInput | SortOrder
    has_table?: SortOrderInput | SortOrder
    hairdryer?: SortOrderInput | SortOrder
    _count?: facilitiesCountOrderByAggregateInput
    _avg?: facilitiesAvgOrderByAggregateInput
    _max?: facilitiesMaxOrderByAggregateInput
    _min?: facilitiesMinOrderByAggregateInput
    _sum?: facilitiesSumOrderByAggregateInput
  }

  export type facilitiesScalarWhereWithAggregatesInput = {
    AND?: facilitiesScalarWhereWithAggregatesInput | facilitiesScalarWhereWithAggregatesInput[]
    OR?: facilitiesScalarWhereWithAggregatesInput[]
    NOT?: facilitiesScalarWhereWithAggregatesInput | facilitiesScalarWhereWithAggregatesInput[]
    facility_id?: IntWithAggregatesFilter<"facilities"> | number
    room_id?: IntNullableWithAggregatesFilter<"facilities"> | number | null
    has_bathfacility?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_bath?: IntNullableWithAggregatesFilter<"facilities"> | number | null
    has_home_theater?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_air_conditioning?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_tv?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_pc?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    cable?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_internet?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_refrigerator?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_toiletries?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_sofa?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_cook?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    has_table?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
    hairdryer?: BoolNullableWithAggregatesFilter<"facilities"> | boolean | null
  }

  export type lodgingsWhereInput = {
    AND?: lodgingsWhereInput | lodgingsWhereInput[]
    OR?: lodgingsWhereInput[]
    NOT?: lodgingsWhereInput | lodgingsWhereInput[]
    lodging_id?: IntFilter<"lodgings"> | number
    name?: StringFilter<"lodgings"> | string
    part?: StringFilter<"lodgings"> | string
    area?: StringFilter<"lodgings"> | string
    sigungu?: StringNullableFilter<"lodgings"> | string | null
    address?: StringFilter<"lodgings"> | string
    rating?: DecimalNullableFilter<"lodgings"> | Decimal | DecimalJsLike | number | string | null
    tel?: StringNullableFilter<"lodgings"> | string | null
    main_image?: StringNullableFilter<"lodgings"> | string | null
    created_at?: DateTimeNullableFilter<"lodgings"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"lodgings"> | Date | string | null
    reviews?: ReviewsListRelationFilter
    rooms?: RoomsListRelationFilter
  }

  export type lodgingsOrderByWithRelationInput = {
    lodging_id?: SortOrder
    name?: SortOrder
    part?: SortOrder
    area?: SortOrder
    sigungu?: SortOrderInput | SortOrder
    address?: SortOrder
    rating?: SortOrderInput | SortOrder
    tel?: SortOrderInput | SortOrder
    main_image?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    reviews?: reviewsOrderByRelationAggregateInput
    rooms?: roomsOrderByRelationAggregateInput
  }

  export type lodgingsWhereUniqueInput = Prisma.AtLeast<{
    lodging_id?: number
    AND?: lodgingsWhereInput | lodgingsWhereInput[]
    OR?: lodgingsWhereInput[]
    NOT?: lodgingsWhereInput | lodgingsWhereInput[]
    name?: StringFilter<"lodgings"> | string
    part?: StringFilter<"lodgings"> | string
    area?: StringFilter<"lodgings"> | string
    sigungu?: StringNullableFilter<"lodgings"> | string | null
    address?: StringFilter<"lodgings"> | string
    rating?: DecimalNullableFilter<"lodgings"> | Decimal | DecimalJsLike | number | string | null
    tel?: StringNullableFilter<"lodgings"> | string | null
    main_image?: StringNullableFilter<"lodgings"> | string | null
    created_at?: DateTimeNullableFilter<"lodgings"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"lodgings"> | Date | string | null
    reviews?: ReviewsListRelationFilter
    rooms?: RoomsListRelationFilter
  }, "lodging_id">

  export type lodgingsOrderByWithAggregationInput = {
    lodging_id?: SortOrder
    name?: SortOrder
    part?: SortOrder
    area?: SortOrder
    sigungu?: SortOrderInput | SortOrder
    address?: SortOrder
    rating?: SortOrderInput | SortOrder
    tel?: SortOrderInput | SortOrder
    main_image?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: lodgingsCountOrderByAggregateInput
    _avg?: lodgingsAvgOrderByAggregateInput
    _max?: lodgingsMaxOrderByAggregateInput
    _min?: lodgingsMinOrderByAggregateInput
    _sum?: lodgingsSumOrderByAggregateInput
  }

  export type lodgingsScalarWhereWithAggregatesInput = {
    AND?: lodgingsScalarWhereWithAggregatesInput | lodgingsScalarWhereWithAggregatesInput[]
    OR?: lodgingsScalarWhereWithAggregatesInput[]
    NOT?: lodgingsScalarWhereWithAggregatesInput | lodgingsScalarWhereWithAggregatesInput[]
    lodging_id?: IntWithAggregatesFilter<"lodgings"> | number
    name?: StringWithAggregatesFilter<"lodgings"> | string
    part?: StringWithAggregatesFilter<"lodgings"> | string
    area?: StringWithAggregatesFilter<"lodgings"> | string
    sigungu?: StringNullableWithAggregatesFilter<"lodgings"> | string | null
    address?: StringWithAggregatesFilter<"lodgings"> | string
    rating?: DecimalNullableWithAggregatesFilter<"lodgings"> | Decimal | DecimalJsLike | number | string | null
    tel?: StringNullableWithAggregatesFilter<"lodgings"> | string | null
    main_image?: StringNullableWithAggregatesFilter<"lodgings"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"lodgings"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"lodgings"> | Date | string | null
  }

  export type reservationsWhereInput = {
    AND?: reservationsWhereInput | reservationsWhereInput[]
    OR?: reservationsWhereInput[]
    NOT?: reservationsWhereInput | reservationsWhereInput[]
    reservation_id?: IntFilter<"reservations"> | number
    user_id?: IntNullableFilter<"reservations"> | number | null
    room_id?: IntNullableFilter<"reservations"> | number | null
    check_in_date?: DateTimeFilter<"reservations"> | Date | string
    check_out_date?: DateTimeFilter<"reservations"> | Date | string
    person_num?: IntFilter<"reservations"> | number
    total_price?: DecimalFilter<"reservations"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"reservations"> | string
    created_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }

  export type reservationsOrderByWithRelationInput = {
    reservation_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    room_id?: SortOrderInput | SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    rooms?: roomsOrderByWithRelationInput
  }

  export type reservationsWhereUniqueInput = Prisma.AtLeast<{
    reservation_id?: number
    AND?: reservationsWhereInput | reservationsWhereInput[]
    OR?: reservationsWhereInput[]
    NOT?: reservationsWhereInput | reservationsWhereInput[]
    user_id?: IntNullableFilter<"reservations"> | number | null
    room_id?: IntNullableFilter<"reservations"> | number | null
    check_in_date?: DateTimeFilter<"reservations"> | Date | string
    check_out_date?: DateTimeFilter<"reservations"> | Date | string
    person_num?: IntFilter<"reservations"> | number
    total_price?: DecimalFilter<"reservations"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"reservations"> | string
    created_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }, "reservation_id">

  export type reservationsOrderByWithAggregationInput = {
    reservation_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    room_id?: SortOrderInput | SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: reservationsCountOrderByAggregateInput
    _avg?: reservationsAvgOrderByAggregateInput
    _max?: reservationsMaxOrderByAggregateInput
    _min?: reservationsMinOrderByAggregateInput
    _sum?: reservationsSumOrderByAggregateInput
  }

  export type reservationsScalarWhereWithAggregatesInput = {
    AND?: reservationsScalarWhereWithAggregatesInput | reservationsScalarWhereWithAggregatesInput[]
    OR?: reservationsScalarWhereWithAggregatesInput[]
    NOT?: reservationsScalarWhereWithAggregatesInput | reservationsScalarWhereWithAggregatesInput[]
    reservation_id?: IntWithAggregatesFilter<"reservations"> | number
    user_id?: IntNullableWithAggregatesFilter<"reservations"> | number | null
    room_id?: IntNullableWithAggregatesFilter<"reservations"> | number | null
    check_in_date?: DateTimeWithAggregatesFilter<"reservations"> | Date | string
    check_out_date?: DateTimeWithAggregatesFilter<"reservations"> | Date | string
    person_num?: IntWithAggregatesFilter<"reservations"> | number
    total_price?: DecimalWithAggregatesFilter<"reservations"> | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter<"reservations"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"reservations"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"reservations"> | Date | string | null
  }

  export type reviewsWhereInput = {
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    review_id?: IntFilter<"reviews"> | number
    lodging_id?: IntNullableFilter<"reviews"> | number | null
    user_id?: IntNullableFilter<"reviews"> | number | null
    rating?: IntFilter<"reviews"> | number
    comment?: StringNullableFilter<"reviews"> | string | null
    created_at?: DateTimeNullableFilter<"reviews"> | Date | string | null
    lodgings?: XOR<LodgingsNullableRelationFilter, lodgingsWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }

  export type reviewsOrderByWithRelationInput = {
    review_id?: SortOrder
    lodging_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    lodgings?: lodgingsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type reviewsWhereUniqueInput = Prisma.AtLeast<{
    review_id?: number
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    lodging_id?: IntNullableFilter<"reviews"> | number | null
    user_id?: IntNullableFilter<"reviews"> | number | null
    rating?: IntFilter<"reviews"> | number
    comment?: StringNullableFilter<"reviews"> | string | null
    created_at?: DateTimeNullableFilter<"reviews"> | Date | string | null
    lodgings?: XOR<LodgingsNullableRelationFilter, lodgingsWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }, "review_id">

  export type reviewsOrderByWithAggregationInput = {
    review_id?: SortOrder
    lodging_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: reviewsCountOrderByAggregateInput
    _avg?: reviewsAvgOrderByAggregateInput
    _max?: reviewsMaxOrderByAggregateInput
    _min?: reviewsMinOrderByAggregateInput
    _sum?: reviewsSumOrderByAggregateInput
  }

  export type reviewsScalarWhereWithAggregatesInput = {
    AND?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    OR?: reviewsScalarWhereWithAggregatesInput[]
    NOT?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    review_id?: IntWithAggregatesFilter<"reviews"> | number
    lodging_id?: IntNullableWithAggregatesFilter<"reviews"> | number | null
    user_id?: IntNullableWithAggregatesFilter<"reviews"> | number | null
    rating?: IntWithAggregatesFilter<"reviews"> | number
    comment?: StringNullableWithAggregatesFilter<"reviews"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"reviews"> | Date | string | null
  }

  export type room_photosWhereInput = {
    AND?: room_photosWhereInput | room_photosWhereInput[]
    OR?: room_photosWhereInput[]
    NOT?: room_photosWhereInput | room_photosWhereInput[]
    photo_id?: IntFilter<"room_photos"> | number
    room_id?: IntNullableFilter<"room_photos"> | number | null
    photo_url?: StringFilter<"room_photos"> | string
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }

  export type room_photosOrderByWithRelationInput = {
    photo_id?: SortOrder
    room_id?: SortOrderInput | SortOrder
    photo_url?: SortOrder
    rooms?: roomsOrderByWithRelationInput
  }

  export type room_photosWhereUniqueInput = Prisma.AtLeast<{
    photo_id?: number
    AND?: room_photosWhereInput | room_photosWhereInput[]
    OR?: room_photosWhereInput[]
    NOT?: room_photosWhereInput | room_photosWhereInput[]
    room_id?: IntNullableFilter<"room_photos"> | number | null
    photo_url?: StringFilter<"room_photos"> | string
    rooms?: XOR<RoomsNullableRelationFilter, roomsWhereInput> | null
  }, "photo_id">

  export type room_photosOrderByWithAggregationInput = {
    photo_id?: SortOrder
    room_id?: SortOrderInput | SortOrder
    photo_url?: SortOrder
    _count?: room_photosCountOrderByAggregateInput
    _avg?: room_photosAvgOrderByAggregateInput
    _max?: room_photosMaxOrderByAggregateInput
    _min?: room_photosMinOrderByAggregateInput
    _sum?: room_photosSumOrderByAggregateInput
  }

  export type room_photosScalarWhereWithAggregatesInput = {
    AND?: room_photosScalarWhereWithAggregatesInput | room_photosScalarWhereWithAggregatesInput[]
    OR?: room_photosScalarWhereWithAggregatesInput[]
    NOT?: room_photosScalarWhereWithAggregatesInput | room_photosScalarWhereWithAggregatesInput[]
    photo_id?: IntWithAggregatesFilter<"room_photos"> | number
    room_id?: IntNullableWithAggregatesFilter<"room_photos"> | number | null
    photo_url?: StringWithAggregatesFilter<"room_photos"> | string
  }

  export type roomsWhereInput = {
    AND?: roomsWhereInput | roomsWhereInput[]
    OR?: roomsWhereInput[]
    NOT?: roomsWhereInput | roomsWhereInput[]
    room_id?: IntFilter<"rooms"> | number
    lodging_id?: IntNullableFilter<"rooms"> | number | null
    room_name?: StringFilter<"rooms"> | string
    room_count?: IntFilter<"rooms"> | number
    price_per_night?: DecimalFilter<"rooms"> | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFilter<"rooms"> | number
    max_occupancy?: IntFilter<"rooms"> | number
    facilities?: FacilitiesListRelationFilter
    reservations?: ReservationsListRelationFilter
    room_photos?: Room_photosListRelationFilter
    lodgings?: XOR<LodgingsNullableRelationFilter, lodgingsWhereInput> | null
  }

  export type roomsOrderByWithRelationInput = {
    room_id?: SortOrder
    lodging_id?: SortOrderInput | SortOrder
    room_name?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
    facilities?: facilitiesOrderByRelationAggregateInput
    reservations?: reservationsOrderByRelationAggregateInput
    room_photos?: room_photosOrderByRelationAggregateInput
    lodgings?: lodgingsOrderByWithRelationInput
  }

  export type roomsWhereUniqueInput = Prisma.AtLeast<{
    room_id?: number
    AND?: roomsWhereInput | roomsWhereInput[]
    OR?: roomsWhereInput[]
    NOT?: roomsWhereInput | roomsWhereInput[]
    lodging_id?: IntNullableFilter<"rooms"> | number | null
    room_name?: StringFilter<"rooms"> | string
    room_count?: IntFilter<"rooms"> | number
    price_per_night?: DecimalFilter<"rooms"> | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFilter<"rooms"> | number
    max_occupancy?: IntFilter<"rooms"> | number
    facilities?: FacilitiesListRelationFilter
    reservations?: ReservationsListRelationFilter
    room_photos?: Room_photosListRelationFilter
    lodgings?: XOR<LodgingsNullableRelationFilter, lodgingsWhereInput> | null
  }, "room_id">

  export type roomsOrderByWithAggregationInput = {
    room_id?: SortOrder
    lodging_id?: SortOrderInput | SortOrder
    room_name?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
    _count?: roomsCountOrderByAggregateInput
    _avg?: roomsAvgOrderByAggregateInput
    _max?: roomsMaxOrderByAggregateInput
    _min?: roomsMinOrderByAggregateInput
    _sum?: roomsSumOrderByAggregateInput
  }

  export type roomsScalarWhereWithAggregatesInput = {
    AND?: roomsScalarWhereWithAggregatesInput | roomsScalarWhereWithAggregatesInput[]
    OR?: roomsScalarWhereWithAggregatesInput[]
    NOT?: roomsScalarWhereWithAggregatesInput | roomsScalarWhereWithAggregatesInput[]
    room_id?: IntWithAggregatesFilter<"rooms"> | number
    lodging_id?: IntNullableWithAggregatesFilter<"rooms"> | number | null
    room_name?: StringWithAggregatesFilter<"rooms"> | string
    room_count?: IntWithAggregatesFilter<"rooms"> | number
    price_per_night?: DecimalWithAggregatesFilter<"rooms"> | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntWithAggregatesFilter<"rooms"> | number
    max_occupancy?: IntWithAggregatesFilter<"rooms"> | number
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    user_name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    phone_number?: StringFilter<"users"> | string
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    permission?: StringFilter<"users"> | string
    birth?: DateTimeFilter<"users"> | Date | string
    gender?: StringFilter<"users"> | string
    reservations?: ReservationsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    permission?: SortOrder
    birth?: SortOrder
    gender?: SortOrder
    reservations?: reservationsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_name?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    phone_number?: StringFilter<"users"> | string
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    permission?: StringFilter<"users"> | string
    birth?: DateTimeFilter<"users"> | Date | string
    gender?: StringFilter<"users"> | string
    reservations?: ReservationsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }, "user_id" | "email">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    permission?: SortOrder
    birth?: SortOrder
    gender?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    user_name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    phone_number?: StringWithAggregatesFilter<"users"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    permission?: StringWithAggregatesFilter<"users"> | string
    birth?: DateTimeWithAggregatesFilter<"users"> | Date | string
    gender?: StringWithAggregatesFilter<"users"> | string
  }

  export type facilitiesCreateInput = {
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
    rooms?: roomsCreateNestedOneWithoutFacilitiesInput
  }

  export type facilitiesUncheckedCreateInput = {
    facility_id?: number
    room_id?: number | null
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
  }

  export type facilitiesUpdateInput = {
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rooms?: roomsUpdateOneWithoutFacilitiesNestedInput
  }

  export type facilitiesUncheckedUpdateInput = {
    facility_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type facilitiesCreateManyInput = {
    facility_id?: number
    room_id?: number | null
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
  }

  export type facilitiesUpdateManyMutationInput = {
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type facilitiesUncheckedUpdateManyInput = {
    facility_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type lodgingsCreateInput = {
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    reviews?: reviewsCreateNestedManyWithoutLodgingsInput
    rooms?: roomsCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsUncheckedCreateInput = {
    lodging_id?: number
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    reviews?: reviewsUncheckedCreateNestedManyWithoutLodgingsInput
    rooms?: roomsUncheckedCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUpdateManyWithoutLodgingsNestedInput
    rooms?: roomsUpdateManyWithoutLodgingsNestedInput
  }

  export type lodgingsUncheckedUpdateInput = {
    lodging_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUncheckedUpdateManyWithoutLodgingsNestedInput
    rooms?: roomsUncheckedUpdateManyWithoutLodgingsNestedInput
  }

  export type lodgingsCreateManyInput = {
    lodging_id?: number
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type lodgingsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type lodgingsUncheckedUpdateManyInput = {
    lodging_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reservationsCreateInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    users?: usersCreateNestedOneWithoutReservationsInput
    rooms?: roomsCreateNestedOneWithoutReservationsInput
  }

  export type reservationsUncheckedCreateInput = {
    reservation_id?: number
    user_id?: number | null
    room_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type reservationsUpdateInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutReservationsNestedInput
    rooms?: roomsUpdateOneWithoutReservationsNestedInput
  }

  export type reservationsUncheckedUpdateInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reservationsCreateManyInput = {
    reservation_id?: number
    user_id?: number | null
    room_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type reservationsUpdateManyMutationInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reservationsUncheckedUpdateManyInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsCreateInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string | null
    lodgings?: lodgingsCreateNestedOneWithoutReviewsInput
    users?: usersCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateInput = {
    review_id?: number
    lodging_id?: number | null
    user_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type reviewsUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lodgings?: lodgingsUpdateOneWithoutReviewsNestedInput
    users?: usersUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsCreateManyInput = {
    review_id?: number
    lodging_id?: number | null
    user_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type reviewsUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type room_photosCreateInput = {
    photo_url: string
    rooms?: roomsCreateNestedOneWithoutRoom_photosInput
  }

  export type room_photosUncheckedCreateInput = {
    photo_id?: number
    room_id?: number | null
    photo_url: string
  }

  export type room_photosUpdateInput = {
    photo_url?: StringFieldUpdateOperationsInput | string
    rooms?: roomsUpdateOneWithoutRoom_photosNestedInput
  }

  export type room_photosUncheckedUpdateInput = {
    photo_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type room_photosCreateManyInput = {
    photo_id?: number
    room_id?: number | null
    photo_url: string
  }

  export type room_photosUpdateManyMutationInput = {
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type room_photosUncheckedUpdateManyInput = {
    photo_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type roomsCreateInput = {
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesCreateNestedManyWithoutRoomsInput
    reservations?: reservationsCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosCreateNestedManyWithoutRoomsInput
    lodgings?: lodgingsCreateNestedOneWithoutRoomsInput
  }

  export type roomsUncheckedCreateInput = {
    room_id?: number
    lodging_id?: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesUncheckedCreateNestedManyWithoutRoomsInput
    reservations?: reservationsUncheckedCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosUncheckedCreateNestedManyWithoutRoomsInput
  }

  export type roomsUpdateInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUpdateManyWithoutRoomsNestedInput
    lodgings?: lodgingsUpdateOneWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUncheckedUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUncheckedUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUncheckedUpdateManyWithoutRoomsNestedInput
  }

  export type roomsCreateManyInput = {
    room_id?: number
    lodging_id?: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
  }

  export type roomsUpdateManyMutationInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
  }

  export type roomsUncheckedUpdateManyInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reservations?: reservationsCreateNestedManyWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reservations?: reservationsUncheckedCreateNestedManyWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reservations?: reservationsUpdateManyWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reservations?: reservationsUncheckedUpdateManyWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
  }

  export type usersUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type RoomsNullableRelationFilter = {
    is?: roomsWhereInput | null
    isNot?: roomsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type facilitiesCountOrderByAggregateInput = {
    facility_id?: SortOrder
    room_id?: SortOrder
    has_bathfacility?: SortOrder
    has_bath?: SortOrder
    has_home_theater?: SortOrder
    has_air_conditioning?: SortOrder
    has_tv?: SortOrder
    has_pc?: SortOrder
    cable?: SortOrder
    has_internet?: SortOrder
    has_refrigerator?: SortOrder
    has_toiletries?: SortOrder
    has_sofa?: SortOrder
    has_cook?: SortOrder
    has_table?: SortOrder
    hairdryer?: SortOrder
  }

  export type facilitiesAvgOrderByAggregateInput = {
    facility_id?: SortOrder
    room_id?: SortOrder
    has_bath?: SortOrder
  }

  export type facilitiesMaxOrderByAggregateInput = {
    facility_id?: SortOrder
    room_id?: SortOrder
    has_bathfacility?: SortOrder
    has_bath?: SortOrder
    has_home_theater?: SortOrder
    has_air_conditioning?: SortOrder
    has_tv?: SortOrder
    has_pc?: SortOrder
    cable?: SortOrder
    has_internet?: SortOrder
    has_refrigerator?: SortOrder
    has_toiletries?: SortOrder
    has_sofa?: SortOrder
    has_cook?: SortOrder
    has_table?: SortOrder
    hairdryer?: SortOrder
  }

  export type facilitiesMinOrderByAggregateInput = {
    facility_id?: SortOrder
    room_id?: SortOrder
    has_bathfacility?: SortOrder
    has_bath?: SortOrder
    has_home_theater?: SortOrder
    has_air_conditioning?: SortOrder
    has_tv?: SortOrder
    has_pc?: SortOrder
    cable?: SortOrder
    has_internet?: SortOrder
    has_refrigerator?: SortOrder
    has_toiletries?: SortOrder
    has_sofa?: SortOrder
    has_cook?: SortOrder
    has_table?: SortOrder
    hairdryer?: SortOrder
  }

  export type facilitiesSumOrderByAggregateInput = {
    facility_id?: SortOrder
    room_id?: SortOrder
    has_bath?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ReviewsListRelationFilter = {
    every?: reviewsWhereInput
    some?: reviewsWhereInput
    none?: reviewsWhereInput
  }

  export type RoomsListRelationFilter = {
    every?: roomsWhereInput
    some?: roomsWhereInput
    none?: roomsWhereInput
  }

  export type reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roomsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type lodgingsCountOrderByAggregateInput = {
    lodging_id?: SortOrder
    name?: SortOrder
    part?: SortOrder
    area?: SortOrder
    sigungu?: SortOrder
    address?: SortOrder
    rating?: SortOrder
    tel?: SortOrder
    main_image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type lodgingsAvgOrderByAggregateInput = {
    lodging_id?: SortOrder
    rating?: SortOrder
  }

  export type lodgingsMaxOrderByAggregateInput = {
    lodging_id?: SortOrder
    name?: SortOrder
    part?: SortOrder
    area?: SortOrder
    sigungu?: SortOrder
    address?: SortOrder
    rating?: SortOrder
    tel?: SortOrder
    main_image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type lodgingsMinOrderByAggregateInput = {
    lodging_id?: SortOrder
    name?: SortOrder
    part?: SortOrder
    area?: SortOrder
    sigungu?: SortOrder
    address?: SortOrder
    rating?: SortOrder
    tel?: SortOrder
    main_image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type lodgingsSumOrderByAggregateInput = {
    lodging_id?: SortOrder
    rating?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type reservationsCountOrderByAggregateInput = {
    reservation_id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reservationsAvgOrderByAggregateInput = {
    reservation_id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
  }

  export type reservationsMaxOrderByAggregateInput = {
    reservation_id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reservationsMinOrderByAggregateInput = {
    reservation_id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type reservationsSumOrderByAggregateInput = {
    reservation_id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    person_num?: SortOrder
    total_price?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type LodgingsNullableRelationFilter = {
    is?: lodgingsWhereInput | null
    isNot?: lodgingsWhereInput | null
  }

  export type reviewsCountOrderByAggregateInput = {
    review_id?: SortOrder
    lodging_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type reviewsAvgOrderByAggregateInput = {
    review_id?: SortOrder
    lodging_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type reviewsMaxOrderByAggregateInput = {
    review_id?: SortOrder
    lodging_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type reviewsMinOrderByAggregateInput = {
    review_id?: SortOrder
    lodging_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type reviewsSumOrderByAggregateInput = {
    review_id?: SortOrder
    lodging_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type room_photosCountOrderByAggregateInput = {
    photo_id?: SortOrder
    room_id?: SortOrder
    photo_url?: SortOrder
  }

  export type room_photosAvgOrderByAggregateInput = {
    photo_id?: SortOrder
    room_id?: SortOrder
  }

  export type room_photosMaxOrderByAggregateInput = {
    photo_id?: SortOrder
    room_id?: SortOrder
    photo_url?: SortOrder
  }

  export type room_photosMinOrderByAggregateInput = {
    photo_id?: SortOrder
    room_id?: SortOrder
    photo_url?: SortOrder
  }

  export type room_photosSumOrderByAggregateInput = {
    photo_id?: SortOrder
    room_id?: SortOrder
  }

  export type FacilitiesListRelationFilter = {
    every?: facilitiesWhereInput
    some?: facilitiesWhereInput
    none?: facilitiesWhereInput
  }

  export type ReservationsListRelationFilter = {
    every?: reservationsWhereInput
    some?: reservationsWhereInput
    none?: reservationsWhereInput
  }

  export type Room_photosListRelationFilter = {
    every?: room_photosWhereInput
    some?: room_photosWhereInput
    none?: room_photosWhereInput
  }

  export type facilitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reservationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type room_photosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roomsCountOrderByAggregateInput = {
    room_id?: SortOrder
    lodging_id?: SortOrder
    room_name?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
  }

  export type roomsAvgOrderByAggregateInput = {
    room_id?: SortOrder
    lodging_id?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
  }

  export type roomsMaxOrderByAggregateInput = {
    room_id?: SortOrder
    lodging_id?: SortOrder
    room_name?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
  }

  export type roomsMinOrderByAggregateInput = {
    room_id?: SortOrder
    lodging_id?: SortOrder
    room_name?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
  }

  export type roomsSumOrderByAggregateInput = {
    room_id?: SortOrder
    lodging_id?: SortOrder
    room_count?: SortOrder
    price_per_night?: SortOrder
    min_occupancy?: SortOrder
    max_occupancy?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    permission?: SortOrder
    birth?: SortOrder
    gender?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    permission?: SortOrder
    birth?: SortOrder
    gender?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    permission?: SortOrder
    birth?: SortOrder
    gender?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type roomsCreateNestedOneWithoutFacilitiesInput = {
    create?: XOR<roomsCreateWithoutFacilitiesInput, roomsUncheckedCreateWithoutFacilitiesInput>
    connectOrCreate?: roomsCreateOrConnectWithoutFacilitiesInput
    connect?: roomsWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type roomsUpdateOneWithoutFacilitiesNestedInput = {
    create?: XOR<roomsCreateWithoutFacilitiesInput, roomsUncheckedCreateWithoutFacilitiesInput>
    connectOrCreate?: roomsCreateOrConnectWithoutFacilitiesInput
    upsert?: roomsUpsertWithoutFacilitiesInput
    disconnect?: roomsWhereInput | boolean
    delete?: roomsWhereInput | boolean
    connect?: roomsWhereUniqueInput
    update?: XOR<XOR<roomsUpdateToOneWithWhereWithoutFacilitiesInput, roomsUpdateWithoutFacilitiesInput>, roomsUncheckedUpdateWithoutFacilitiesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type reviewsCreateNestedManyWithoutLodgingsInput = {
    create?: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput> | reviewsCreateWithoutLodgingsInput[] | reviewsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutLodgingsInput | reviewsCreateOrConnectWithoutLodgingsInput[]
    createMany?: reviewsCreateManyLodgingsInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type roomsCreateNestedManyWithoutLodgingsInput = {
    create?: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput> | roomsCreateWithoutLodgingsInput[] | roomsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: roomsCreateOrConnectWithoutLodgingsInput | roomsCreateOrConnectWithoutLodgingsInput[]
    createMany?: roomsCreateManyLodgingsInputEnvelope
    connect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutLodgingsInput = {
    create?: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput> | reviewsCreateWithoutLodgingsInput[] | reviewsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutLodgingsInput | reviewsCreateOrConnectWithoutLodgingsInput[]
    createMany?: reviewsCreateManyLodgingsInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type roomsUncheckedCreateNestedManyWithoutLodgingsInput = {
    create?: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput> | roomsCreateWithoutLodgingsInput[] | roomsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: roomsCreateOrConnectWithoutLodgingsInput | roomsCreateOrConnectWithoutLodgingsInput[]
    createMany?: roomsCreateManyLodgingsInputEnvelope
    connect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type reviewsUpdateManyWithoutLodgingsNestedInput = {
    create?: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput> | reviewsCreateWithoutLodgingsInput[] | reviewsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutLodgingsInput | reviewsCreateOrConnectWithoutLodgingsInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutLodgingsInput | reviewsUpsertWithWhereUniqueWithoutLodgingsInput[]
    createMany?: reviewsCreateManyLodgingsInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutLodgingsInput | reviewsUpdateWithWhereUniqueWithoutLodgingsInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutLodgingsInput | reviewsUpdateManyWithWhereWithoutLodgingsInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type roomsUpdateManyWithoutLodgingsNestedInput = {
    create?: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput> | roomsCreateWithoutLodgingsInput[] | roomsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: roomsCreateOrConnectWithoutLodgingsInput | roomsCreateOrConnectWithoutLodgingsInput[]
    upsert?: roomsUpsertWithWhereUniqueWithoutLodgingsInput | roomsUpsertWithWhereUniqueWithoutLodgingsInput[]
    createMany?: roomsCreateManyLodgingsInputEnvelope
    set?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    disconnect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    delete?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    connect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    update?: roomsUpdateWithWhereUniqueWithoutLodgingsInput | roomsUpdateWithWhereUniqueWithoutLodgingsInput[]
    updateMany?: roomsUpdateManyWithWhereWithoutLodgingsInput | roomsUpdateManyWithWhereWithoutLodgingsInput[]
    deleteMany?: roomsScalarWhereInput | roomsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutLodgingsNestedInput = {
    create?: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput> | reviewsCreateWithoutLodgingsInput[] | reviewsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutLodgingsInput | reviewsCreateOrConnectWithoutLodgingsInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutLodgingsInput | reviewsUpsertWithWhereUniqueWithoutLodgingsInput[]
    createMany?: reviewsCreateManyLodgingsInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutLodgingsInput | reviewsUpdateWithWhereUniqueWithoutLodgingsInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutLodgingsInput | reviewsUpdateManyWithWhereWithoutLodgingsInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type roomsUncheckedUpdateManyWithoutLodgingsNestedInput = {
    create?: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput> | roomsCreateWithoutLodgingsInput[] | roomsUncheckedCreateWithoutLodgingsInput[]
    connectOrCreate?: roomsCreateOrConnectWithoutLodgingsInput | roomsCreateOrConnectWithoutLodgingsInput[]
    upsert?: roomsUpsertWithWhereUniqueWithoutLodgingsInput | roomsUpsertWithWhereUniqueWithoutLodgingsInput[]
    createMany?: roomsCreateManyLodgingsInputEnvelope
    set?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    disconnect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    delete?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    connect?: roomsWhereUniqueInput | roomsWhereUniqueInput[]
    update?: roomsUpdateWithWhereUniqueWithoutLodgingsInput | roomsUpdateWithWhereUniqueWithoutLodgingsInput[]
    updateMany?: roomsUpdateManyWithWhereWithoutLodgingsInput | roomsUpdateManyWithWhereWithoutLodgingsInput[]
    deleteMany?: roomsScalarWhereInput | roomsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutReservationsInput = {
    create?: XOR<usersCreateWithoutReservationsInput, usersUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReservationsInput
    connect?: usersWhereUniqueInput
  }

  export type roomsCreateNestedOneWithoutReservationsInput = {
    create?: XOR<roomsCreateWithoutReservationsInput, roomsUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: roomsCreateOrConnectWithoutReservationsInput
    connect?: roomsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type usersUpdateOneWithoutReservationsNestedInput = {
    create?: XOR<usersCreateWithoutReservationsInput, usersUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReservationsInput
    upsert?: usersUpsertWithoutReservationsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReservationsInput, usersUpdateWithoutReservationsInput>, usersUncheckedUpdateWithoutReservationsInput>
  }

  export type roomsUpdateOneWithoutReservationsNestedInput = {
    create?: XOR<roomsCreateWithoutReservationsInput, roomsUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: roomsCreateOrConnectWithoutReservationsInput
    upsert?: roomsUpsertWithoutReservationsInput
    disconnect?: roomsWhereInput | boolean
    delete?: roomsWhereInput | boolean
    connect?: roomsWhereUniqueInput
    update?: XOR<XOR<roomsUpdateToOneWithWhereWithoutReservationsInput, roomsUpdateWithoutReservationsInput>, roomsUncheckedUpdateWithoutReservationsInput>
  }

  export type lodgingsCreateNestedOneWithoutReviewsInput = {
    create?: XOR<lodgingsCreateWithoutReviewsInput, lodgingsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: lodgingsCreateOrConnectWithoutReviewsInput
    connect?: lodgingsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    connect?: usersWhereUniqueInput
  }

  export type lodgingsUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<lodgingsCreateWithoutReviewsInput, lodgingsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: lodgingsCreateOrConnectWithoutReviewsInput
    upsert?: lodgingsUpsertWithoutReviewsInput
    disconnect?: lodgingsWhereInput | boolean
    delete?: lodgingsWhereInput | boolean
    connect?: lodgingsWhereUniqueInput
    update?: XOR<XOR<lodgingsUpdateToOneWithWhereWithoutReviewsInput, lodgingsUpdateWithoutReviewsInput>, lodgingsUncheckedUpdateWithoutReviewsInput>
  }

  export type usersUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    upsert?: usersUpsertWithoutReviewsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReviewsInput, usersUpdateWithoutReviewsInput>, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type roomsCreateNestedOneWithoutRoom_photosInput = {
    create?: XOR<roomsCreateWithoutRoom_photosInput, roomsUncheckedCreateWithoutRoom_photosInput>
    connectOrCreate?: roomsCreateOrConnectWithoutRoom_photosInput
    connect?: roomsWhereUniqueInput
  }

  export type roomsUpdateOneWithoutRoom_photosNestedInput = {
    create?: XOR<roomsCreateWithoutRoom_photosInput, roomsUncheckedCreateWithoutRoom_photosInput>
    connectOrCreate?: roomsCreateOrConnectWithoutRoom_photosInput
    upsert?: roomsUpsertWithoutRoom_photosInput
    disconnect?: roomsWhereInput | boolean
    delete?: roomsWhereInput | boolean
    connect?: roomsWhereUniqueInput
    update?: XOR<XOR<roomsUpdateToOneWithWhereWithoutRoom_photosInput, roomsUpdateWithoutRoom_photosInput>, roomsUncheckedUpdateWithoutRoom_photosInput>
  }

  export type facilitiesCreateNestedManyWithoutRoomsInput = {
    create?: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput> | facilitiesCreateWithoutRoomsInput[] | facilitiesUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: facilitiesCreateOrConnectWithoutRoomsInput | facilitiesCreateOrConnectWithoutRoomsInput[]
    createMany?: facilitiesCreateManyRoomsInputEnvelope
    connect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
  }

  export type reservationsCreateNestedManyWithoutRoomsInput = {
    create?: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput> | reservationsCreateWithoutRoomsInput[] | reservationsUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutRoomsInput | reservationsCreateOrConnectWithoutRoomsInput[]
    createMany?: reservationsCreateManyRoomsInputEnvelope
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
  }

  export type room_photosCreateNestedManyWithoutRoomsInput = {
    create?: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput> | room_photosCreateWithoutRoomsInput[] | room_photosUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: room_photosCreateOrConnectWithoutRoomsInput | room_photosCreateOrConnectWithoutRoomsInput[]
    createMany?: room_photosCreateManyRoomsInputEnvelope
    connect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
  }

  export type lodgingsCreateNestedOneWithoutRoomsInput = {
    create?: XOR<lodgingsCreateWithoutRoomsInput, lodgingsUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: lodgingsCreateOrConnectWithoutRoomsInput
    connect?: lodgingsWhereUniqueInput
  }

  export type facilitiesUncheckedCreateNestedManyWithoutRoomsInput = {
    create?: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput> | facilitiesCreateWithoutRoomsInput[] | facilitiesUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: facilitiesCreateOrConnectWithoutRoomsInput | facilitiesCreateOrConnectWithoutRoomsInput[]
    createMany?: facilitiesCreateManyRoomsInputEnvelope
    connect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
  }

  export type reservationsUncheckedCreateNestedManyWithoutRoomsInput = {
    create?: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput> | reservationsCreateWithoutRoomsInput[] | reservationsUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutRoomsInput | reservationsCreateOrConnectWithoutRoomsInput[]
    createMany?: reservationsCreateManyRoomsInputEnvelope
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
  }

  export type room_photosUncheckedCreateNestedManyWithoutRoomsInput = {
    create?: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput> | room_photosCreateWithoutRoomsInput[] | room_photosUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: room_photosCreateOrConnectWithoutRoomsInput | room_photosCreateOrConnectWithoutRoomsInput[]
    createMany?: room_photosCreateManyRoomsInputEnvelope
    connect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
  }

  export type facilitiesUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput> | facilitiesCreateWithoutRoomsInput[] | facilitiesUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: facilitiesCreateOrConnectWithoutRoomsInput | facilitiesCreateOrConnectWithoutRoomsInput[]
    upsert?: facilitiesUpsertWithWhereUniqueWithoutRoomsInput | facilitiesUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: facilitiesCreateManyRoomsInputEnvelope
    set?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    disconnect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    delete?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    connect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    update?: facilitiesUpdateWithWhereUniqueWithoutRoomsInput | facilitiesUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: facilitiesUpdateManyWithWhereWithoutRoomsInput | facilitiesUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: facilitiesScalarWhereInput | facilitiesScalarWhereInput[]
  }

  export type reservationsUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput> | reservationsCreateWithoutRoomsInput[] | reservationsUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutRoomsInput | reservationsCreateOrConnectWithoutRoomsInput[]
    upsert?: reservationsUpsertWithWhereUniqueWithoutRoomsInput | reservationsUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: reservationsCreateManyRoomsInputEnvelope
    set?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    disconnect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    delete?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    update?: reservationsUpdateWithWhereUniqueWithoutRoomsInput | reservationsUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: reservationsUpdateManyWithWhereWithoutRoomsInput | reservationsUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
  }

  export type room_photosUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput> | room_photosCreateWithoutRoomsInput[] | room_photosUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: room_photosCreateOrConnectWithoutRoomsInput | room_photosCreateOrConnectWithoutRoomsInput[]
    upsert?: room_photosUpsertWithWhereUniqueWithoutRoomsInput | room_photosUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: room_photosCreateManyRoomsInputEnvelope
    set?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    disconnect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    delete?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    connect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    update?: room_photosUpdateWithWhereUniqueWithoutRoomsInput | room_photosUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: room_photosUpdateManyWithWhereWithoutRoomsInput | room_photosUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: room_photosScalarWhereInput | room_photosScalarWhereInput[]
  }

  export type lodgingsUpdateOneWithoutRoomsNestedInput = {
    create?: XOR<lodgingsCreateWithoutRoomsInput, lodgingsUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: lodgingsCreateOrConnectWithoutRoomsInput
    upsert?: lodgingsUpsertWithoutRoomsInput
    disconnect?: lodgingsWhereInput | boolean
    delete?: lodgingsWhereInput | boolean
    connect?: lodgingsWhereUniqueInput
    update?: XOR<XOR<lodgingsUpdateToOneWithWhereWithoutRoomsInput, lodgingsUpdateWithoutRoomsInput>, lodgingsUncheckedUpdateWithoutRoomsInput>
  }

  export type facilitiesUncheckedUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput> | facilitiesCreateWithoutRoomsInput[] | facilitiesUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: facilitiesCreateOrConnectWithoutRoomsInput | facilitiesCreateOrConnectWithoutRoomsInput[]
    upsert?: facilitiesUpsertWithWhereUniqueWithoutRoomsInput | facilitiesUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: facilitiesCreateManyRoomsInputEnvelope
    set?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    disconnect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    delete?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    connect?: facilitiesWhereUniqueInput | facilitiesWhereUniqueInput[]
    update?: facilitiesUpdateWithWhereUniqueWithoutRoomsInput | facilitiesUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: facilitiesUpdateManyWithWhereWithoutRoomsInput | facilitiesUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: facilitiesScalarWhereInput | facilitiesScalarWhereInput[]
  }

  export type reservationsUncheckedUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput> | reservationsCreateWithoutRoomsInput[] | reservationsUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutRoomsInput | reservationsCreateOrConnectWithoutRoomsInput[]
    upsert?: reservationsUpsertWithWhereUniqueWithoutRoomsInput | reservationsUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: reservationsCreateManyRoomsInputEnvelope
    set?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    disconnect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    delete?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    update?: reservationsUpdateWithWhereUniqueWithoutRoomsInput | reservationsUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: reservationsUpdateManyWithWhereWithoutRoomsInput | reservationsUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
  }

  export type room_photosUncheckedUpdateManyWithoutRoomsNestedInput = {
    create?: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput> | room_photosCreateWithoutRoomsInput[] | room_photosUncheckedCreateWithoutRoomsInput[]
    connectOrCreate?: room_photosCreateOrConnectWithoutRoomsInput | room_photosCreateOrConnectWithoutRoomsInput[]
    upsert?: room_photosUpsertWithWhereUniqueWithoutRoomsInput | room_photosUpsertWithWhereUniqueWithoutRoomsInput[]
    createMany?: room_photosCreateManyRoomsInputEnvelope
    set?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    disconnect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    delete?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    connect?: room_photosWhereUniqueInput | room_photosWhereUniqueInput[]
    update?: room_photosUpdateWithWhereUniqueWithoutRoomsInput | room_photosUpdateWithWhereUniqueWithoutRoomsInput[]
    updateMany?: room_photosUpdateManyWithWhereWithoutRoomsInput | room_photosUpdateManyWithWhereWithoutRoomsInput[]
    deleteMany?: room_photosScalarWhereInput | room_photosScalarWhereInput[]
  }

  export type reservationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput> | reservationsCreateWithoutUsersInput[] | reservationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutUsersInput | reservationsCreateOrConnectWithoutUsersInput[]
    createMany?: reservationsCreateManyUsersInputEnvelope
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutUsersInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type reservationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput> | reservationsCreateWithoutUsersInput[] | reservationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutUsersInput | reservationsCreateOrConnectWithoutUsersInput[]
    createMany?: reservationsCreateManyUsersInputEnvelope
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type reservationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput> | reservationsCreateWithoutUsersInput[] | reservationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutUsersInput | reservationsCreateOrConnectWithoutUsersInput[]
    upsert?: reservationsUpsertWithWhereUniqueWithoutUsersInput | reservationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reservationsCreateManyUsersInputEnvelope
    set?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    disconnect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    delete?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    update?: reservationsUpdateWithWhereUniqueWithoutUsersInput | reservationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reservationsUpdateManyWithWhereWithoutUsersInput | reservationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUsersInput | reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUsersInput | reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUsersInput | reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type reservationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput> | reservationsCreateWithoutUsersInput[] | reservationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reservationsCreateOrConnectWithoutUsersInput | reservationsCreateOrConnectWithoutUsersInput[]
    upsert?: reservationsUpsertWithWhereUniqueWithoutUsersInput | reservationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reservationsCreateManyUsersInputEnvelope
    set?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    disconnect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    delete?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    connect?: reservationsWhereUniqueInput | reservationsWhereUniqueInput[]
    update?: reservationsUpdateWithWhereUniqueWithoutUsersInput | reservationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reservationsUpdateManyWithWhereWithoutUsersInput | reservationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUsersInput | reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUsersInput | reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUsersInput | reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type roomsCreateWithoutFacilitiesInput = {
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    reservations?: reservationsCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosCreateNestedManyWithoutRoomsInput
    lodgings?: lodgingsCreateNestedOneWithoutRoomsInput
  }

  export type roomsUncheckedCreateWithoutFacilitiesInput = {
    room_id?: number
    lodging_id?: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    reservations?: reservationsUncheckedCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosUncheckedCreateNestedManyWithoutRoomsInput
  }

  export type roomsCreateOrConnectWithoutFacilitiesInput = {
    where: roomsWhereUniqueInput
    create: XOR<roomsCreateWithoutFacilitiesInput, roomsUncheckedCreateWithoutFacilitiesInput>
  }

  export type roomsUpsertWithoutFacilitiesInput = {
    update: XOR<roomsUpdateWithoutFacilitiesInput, roomsUncheckedUpdateWithoutFacilitiesInput>
    create: XOR<roomsCreateWithoutFacilitiesInput, roomsUncheckedCreateWithoutFacilitiesInput>
    where?: roomsWhereInput
  }

  export type roomsUpdateToOneWithWhereWithoutFacilitiesInput = {
    where?: roomsWhereInput
    data: XOR<roomsUpdateWithoutFacilitiesInput, roomsUncheckedUpdateWithoutFacilitiesInput>
  }

  export type roomsUpdateWithoutFacilitiesInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    reservations?: reservationsUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUpdateManyWithoutRoomsNestedInput
    lodgings?: lodgingsUpdateOneWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateWithoutFacilitiesInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    reservations?: reservationsUncheckedUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUncheckedUpdateManyWithoutRoomsNestedInput
  }

  export type reviewsCreateWithoutLodgingsInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string | null
    users?: usersCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutLodgingsInput = {
    review_id?: number
    user_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type reviewsCreateOrConnectWithoutLodgingsInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput>
  }

  export type reviewsCreateManyLodgingsInputEnvelope = {
    data: reviewsCreateManyLodgingsInput | reviewsCreateManyLodgingsInput[]
    skipDuplicates?: boolean
  }

  export type roomsCreateWithoutLodgingsInput = {
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesCreateNestedManyWithoutRoomsInput
    reservations?: reservationsCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosCreateNestedManyWithoutRoomsInput
  }

  export type roomsUncheckedCreateWithoutLodgingsInput = {
    room_id?: number
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesUncheckedCreateNestedManyWithoutRoomsInput
    reservations?: reservationsUncheckedCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosUncheckedCreateNestedManyWithoutRoomsInput
  }

  export type roomsCreateOrConnectWithoutLodgingsInput = {
    where: roomsWhereUniqueInput
    create: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput>
  }

  export type roomsCreateManyLodgingsInputEnvelope = {
    data: roomsCreateManyLodgingsInput | roomsCreateManyLodgingsInput[]
    skipDuplicates?: boolean
  }

  export type reviewsUpsertWithWhereUniqueWithoutLodgingsInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutLodgingsInput, reviewsUncheckedUpdateWithoutLodgingsInput>
    create: XOR<reviewsCreateWithoutLodgingsInput, reviewsUncheckedCreateWithoutLodgingsInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutLodgingsInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutLodgingsInput, reviewsUncheckedUpdateWithoutLodgingsInput>
  }

  export type reviewsUpdateManyWithWhereWithoutLodgingsInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutLodgingsInput>
  }

  export type reviewsScalarWhereInput = {
    AND?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    OR?: reviewsScalarWhereInput[]
    NOT?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    review_id?: IntFilter<"reviews"> | number
    lodging_id?: IntNullableFilter<"reviews"> | number | null
    user_id?: IntNullableFilter<"reviews"> | number | null
    rating?: IntFilter<"reviews"> | number
    comment?: StringNullableFilter<"reviews"> | string | null
    created_at?: DateTimeNullableFilter<"reviews"> | Date | string | null
  }

  export type roomsUpsertWithWhereUniqueWithoutLodgingsInput = {
    where: roomsWhereUniqueInput
    update: XOR<roomsUpdateWithoutLodgingsInput, roomsUncheckedUpdateWithoutLodgingsInput>
    create: XOR<roomsCreateWithoutLodgingsInput, roomsUncheckedCreateWithoutLodgingsInput>
  }

  export type roomsUpdateWithWhereUniqueWithoutLodgingsInput = {
    where: roomsWhereUniqueInput
    data: XOR<roomsUpdateWithoutLodgingsInput, roomsUncheckedUpdateWithoutLodgingsInput>
  }

  export type roomsUpdateManyWithWhereWithoutLodgingsInput = {
    where: roomsScalarWhereInput
    data: XOR<roomsUpdateManyMutationInput, roomsUncheckedUpdateManyWithoutLodgingsInput>
  }

  export type roomsScalarWhereInput = {
    AND?: roomsScalarWhereInput | roomsScalarWhereInput[]
    OR?: roomsScalarWhereInput[]
    NOT?: roomsScalarWhereInput | roomsScalarWhereInput[]
    room_id?: IntFilter<"rooms"> | number
    lodging_id?: IntNullableFilter<"rooms"> | number | null
    room_name?: StringFilter<"rooms"> | string
    room_count?: IntFilter<"rooms"> | number
    price_per_night?: DecimalFilter<"rooms"> | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFilter<"rooms"> | number
    max_occupancy?: IntFilter<"rooms"> | number
  }

  export type usersCreateWithoutReservationsInput = {
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutReservationsInput = {
    user_id?: number
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutReservationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReservationsInput, usersUncheckedCreateWithoutReservationsInput>
  }

  export type roomsCreateWithoutReservationsInput = {
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosCreateNestedManyWithoutRoomsInput
    lodgings?: lodgingsCreateNestedOneWithoutRoomsInput
  }

  export type roomsUncheckedCreateWithoutReservationsInput = {
    room_id?: number
    lodging_id?: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesUncheckedCreateNestedManyWithoutRoomsInput
    room_photos?: room_photosUncheckedCreateNestedManyWithoutRoomsInput
  }

  export type roomsCreateOrConnectWithoutReservationsInput = {
    where: roomsWhereUniqueInput
    create: XOR<roomsCreateWithoutReservationsInput, roomsUncheckedCreateWithoutReservationsInput>
  }

  export type usersUpsertWithoutReservationsInput = {
    update: XOR<usersUpdateWithoutReservationsInput, usersUncheckedUpdateWithoutReservationsInput>
    create: XOR<usersCreateWithoutReservationsInput, usersUncheckedCreateWithoutReservationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReservationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReservationsInput, usersUncheckedUpdateWithoutReservationsInput>
  }

  export type usersUpdateWithoutReservationsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutReservationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type roomsUpsertWithoutReservationsInput = {
    update: XOR<roomsUpdateWithoutReservationsInput, roomsUncheckedUpdateWithoutReservationsInput>
    create: XOR<roomsCreateWithoutReservationsInput, roomsUncheckedCreateWithoutReservationsInput>
    where?: roomsWhereInput
  }

  export type roomsUpdateToOneWithWhereWithoutReservationsInput = {
    where?: roomsWhereInput
    data: XOR<roomsUpdateWithoutReservationsInput, roomsUncheckedUpdateWithoutReservationsInput>
  }

  export type roomsUpdateWithoutReservationsInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUpdateManyWithoutRoomsNestedInput
    lodgings?: lodgingsUpdateOneWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateWithoutReservationsInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUncheckedUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUncheckedUpdateManyWithoutRoomsNestedInput
  }

  export type lodgingsCreateWithoutReviewsInput = {
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    rooms?: roomsCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsUncheckedCreateWithoutReviewsInput = {
    lodging_id?: number
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    rooms?: roomsUncheckedCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsCreateOrConnectWithoutReviewsInput = {
    where: lodgingsWhereUniqueInput
    create: XOR<lodgingsCreateWithoutReviewsInput, lodgingsUncheckedCreateWithoutReviewsInput>
  }

  export type usersCreateWithoutReviewsInput = {
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reservations?: reservationsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutReviewsInput = {
    user_id?: number
    user_name: string
    email: string
    password: string
    phone_number: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    permission: string
    birth: Date | string
    gender: string
    reservations?: reservationsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutReviewsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
  }

  export type lodgingsUpsertWithoutReviewsInput = {
    update: XOR<lodgingsUpdateWithoutReviewsInput, lodgingsUncheckedUpdateWithoutReviewsInput>
    create: XOR<lodgingsCreateWithoutReviewsInput, lodgingsUncheckedCreateWithoutReviewsInput>
    where?: lodgingsWhereInput
  }

  export type lodgingsUpdateToOneWithWhereWithoutReviewsInput = {
    where?: lodgingsWhereInput
    data: XOR<lodgingsUpdateWithoutReviewsInput, lodgingsUncheckedUpdateWithoutReviewsInput>
  }

  export type lodgingsUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rooms?: roomsUpdateManyWithoutLodgingsNestedInput
  }

  export type lodgingsUncheckedUpdateWithoutReviewsInput = {
    lodging_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rooms?: roomsUncheckedUpdateManyWithoutLodgingsNestedInput
  }

  export type usersUpsertWithoutReviewsInput = {
    update: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReviewsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type usersUpdateWithoutReviewsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reservations?: reservationsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutReviewsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    reservations?: reservationsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type roomsCreateWithoutRoom_photosInput = {
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesCreateNestedManyWithoutRoomsInput
    reservations?: reservationsCreateNestedManyWithoutRoomsInput
    lodgings?: lodgingsCreateNestedOneWithoutRoomsInput
  }

  export type roomsUncheckedCreateWithoutRoom_photosInput = {
    room_id?: number
    lodging_id?: number | null
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
    facilities?: facilitiesUncheckedCreateNestedManyWithoutRoomsInput
    reservations?: reservationsUncheckedCreateNestedManyWithoutRoomsInput
  }

  export type roomsCreateOrConnectWithoutRoom_photosInput = {
    where: roomsWhereUniqueInput
    create: XOR<roomsCreateWithoutRoom_photosInput, roomsUncheckedCreateWithoutRoom_photosInput>
  }

  export type roomsUpsertWithoutRoom_photosInput = {
    update: XOR<roomsUpdateWithoutRoom_photosInput, roomsUncheckedUpdateWithoutRoom_photosInput>
    create: XOR<roomsCreateWithoutRoom_photosInput, roomsUncheckedCreateWithoutRoom_photosInput>
    where?: roomsWhereInput
  }

  export type roomsUpdateToOneWithWhereWithoutRoom_photosInput = {
    where?: roomsWhereInput
    data: XOR<roomsUpdateWithoutRoom_photosInput, roomsUncheckedUpdateWithoutRoom_photosInput>
  }

  export type roomsUpdateWithoutRoom_photosInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUpdateManyWithoutRoomsNestedInput
    lodgings?: lodgingsUpdateOneWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateWithoutRoom_photosInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUncheckedUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUncheckedUpdateManyWithoutRoomsNestedInput
  }

  export type facilitiesCreateWithoutRoomsInput = {
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
  }

  export type facilitiesUncheckedCreateWithoutRoomsInput = {
    facility_id?: number
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
  }

  export type facilitiesCreateOrConnectWithoutRoomsInput = {
    where: facilitiesWhereUniqueInput
    create: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput>
  }

  export type facilitiesCreateManyRoomsInputEnvelope = {
    data: facilitiesCreateManyRoomsInput | facilitiesCreateManyRoomsInput[]
    skipDuplicates?: boolean
  }

  export type reservationsCreateWithoutRoomsInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    users?: usersCreateNestedOneWithoutReservationsInput
  }

  export type reservationsUncheckedCreateWithoutRoomsInput = {
    reservation_id?: number
    user_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type reservationsCreateOrConnectWithoutRoomsInput = {
    where: reservationsWhereUniqueInput
    create: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput>
  }

  export type reservationsCreateManyRoomsInputEnvelope = {
    data: reservationsCreateManyRoomsInput | reservationsCreateManyRoomsInput[]
    skipDuplicates?: boolean
  }

  export type room_photosCreateWithoutRoomsInput = {
    photo_url: string
  }

  export type room_photosUncheckedCreateWithoutRoomsInput = {
    photo_id?: number
    photo_url: string
  }

  export type room_photosCreateOrConnectWithoutRoomsInput = {
    where: room_photosWhereUniqueInput
    create: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput>
  }

  export type room_photosCreateManyRoomsInputEnvelope = {
    data: room_photosCreateManyRoomsInput | room_photosCreateManyRoomsInput[]
    skipDuplicates?: boolean
  }

  export type lodgingsCreateWithoutRoomsInput = {
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    reviews?: reviewsCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsUncheckedCreateWithoutRoomsInput = {
    lodging_id?: number
    name: string
    part: string
    area: string
    sigungu?: string | null
    address: string
    rating?: Decimal | DecimalJsLike | number | string | null
    tel?: string | null
    main_image?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    reviews?: reviewsUncheckedCreateNestedManyWithoutLodgingsInput
  }

  export type lodgingsCreateOrConnectWithoutRoomsInput = {
    where: lodgingsWhereUniqueInput
    create: XOR<lodgingsCreateWithoutRoomsInput, lodgingsUncheckedCreateWithoutRoomsInput>
  }

  export type facilitiesUpsertWithWhereUniqueWithoutRoomsInput = {
    where: facilitiesWhereUniqueInput
    update: XOR<facilitiesUpdateWithoutRoomsInput, facilitiesUncheckedUpdateWithoutRoomsInput>
    create: XOR<facilitiesCreateWithoutRoomsInput, facilitiesUncheckedCreateWithoutRoomsInput>
  }

  export type facilitiesUpdateWithWhereUniqueWithoutRoomsInput = {
    where: facilitiesWhereUniqueInput
    data: XOR<facilitiesUpdateWithoutRoomsInput, facilitiesUncheckedUpdateWithoutRoomsInput>
  }

  export type facilitiesUpdateManyWithWhereWithoutRoomsInput = {
    where: facilitiesScalarWhereInput
    data: XOR<facilitiesUpdateManyMutationInput, facilitiesUncheckedUpdateManyWithoutRoomsInput>
  }

  export type facilitiesScalarWhereInput = {
    AND?: facilitiesScalarWhereInput | facilitiesScalarWhereInput[]
    OR?: facilitiesScalarWhereInput[]
    NOT?: facilitiesScalarWhereInput | facilitiesScalarWhereInput[]
    facility_id?: IntFilter<"facilities"> | number
    room_id?: IntNullableFilter<"facilities"> | number | null
    has_bathfacility?: BoolNullableFilter<"facilities"> | boolean | null
    has_bath?: IntNullableFilter<"facilities"> | number | null
    has_home_theater?: BoolNullableFilter<"facilities"> | boolean | null
    has_air_conditioning?: BoolNullableFilter<"facilities"> | boolean | null
    has_tv?: BoolNullableFilter<"facilities"> | boolean | null
    has_pc?: BoolNullableFilter<"facilities"> | boolean | null
    cable?: BoolNullableFilter<"facilities"> | boolean | null
    has_internet?: BoolNullableFilter<"facilities"> | boolean | null
    has_refrigerator?: BoolNullableFilter<"facilities"> | boolean | null
    has_toiletries?: BoolNullableFilter<"facilities"> | boolean | null
    has_sofa?: BoolNullableFilter<"facilities"> | boolean | null
    has_cook?: BoolNullableFilter<"facilities"> | boolean | null
    has_table?: BoolNullableFilter<"facilities"> | boolean | null
    hairdryer?: BoolNullableFilter<"facilities"> | boolean | null
  }

  export type reservationsUpsertWithWhereUniqueWithoutRoomsInput = {
    where: reservationsWhereUniqueInput
    update: XOR<reservationsUpdateWithoutRoomsInput, reservationsUncheckedUpdateWithoutRoomsInput>
    create: XOR<reservationsCreateWithoutRoomsInput, reservationsUncheckedCreateWithoutRoomsInput>
  }

  export type reservationsUpdateWithWhereUniqueWithoutRoomsInput = {
    where: reservationsWhereUniqueInput
    data: XOR<reservationsUpdateWithoutRoomsInput, reservationsUncheckedUpdateWithoutRoomsInput>
  }

  export type reservationsUpdateManyWithWhereWithoutRoomsInput = {
    where: reservationsScalarWhereInput
    data: XOR<reservationsUpdateManyMutationInput, reservationsUncheckedUpdateManyWithoutRoomsInput>
  }

  export type reservationsScalarWhereInput = {
    AND?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
    OR?: reservationsScalarWhereInput[]
    NOT?: reservationsScalarWhereInput | reservationsScalarWhereInput[]
    reservation_id?: IntFilter<"reservations"> | number
    user_id?: IntNullableFilter<"reservations"> | number | null
    room_id?: IntNullableFilter<"reservations"> | number | null
    check_in_date?: DateTimeFilter<"reservations"> | Date | string
    check_out_date?: DateTimeFilter<"reservations"> | Date | string
    person_num?: IntFilter<"reservations"> | number
    total_price?: DecimalFilter<"reservations"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"reservations"> | string
    created_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"reservations"> | Date | string | null
  }

  export type room_photosUpsertWithWhereUniqueWithoutRoomsInput = {
    where: room_photosWhereUniqueInput
    update: XOR<room_photosUpdateWithoutRoomsInput, room_photosUncheckedUpdateWithoutRoomsInput>
    create: XOR<room_photosCreateWithoutRoomsInput, room_photosUncheckedCreateWithoutRoomsInput>
  }

  export type room_photosUpdateWithWhereUniqueWithoutRoomsInput = {
    where: room_photosWhereUniqueInput
    data: XOR<room_photosUpdateWithoutRoomsInput, room_photosUncheckedUpdateWithoutRoomsInput>
  }

  export type room_photosUpdateManyWithWhereWithoutRoomsInput = {
    where: room_photosScalarWhereInput
    data: XOR<room_photosUpdateManyMutationInput, room_photosUncheckedUpdateManyWithoutRoomsInput>
  }

  export type room_photosScalarWhereInput = {
    AND?: room_photosScalarWhereInput | room_photosScalarWhereInput[]
    OR?: room_photosScalarWhereInput[]
    NOT?: room_photosScalarWhereInput | room_photosScalarWhereInput[]
    photo_id?: IntFilter<"room_photos"> | number
    room_id?: IntNullableFilter<"room_photos"> | number | null
    photo_url?: StringFilter<"room_photos"> | string
  }

  export type lodgingsUpsertWithoutRoomsInput = {
    update: XOR<lodgingsUpdateWithoutRoomsInput, lodgingsUncheckedUpdateWithoutRoomsInput>
    create: XOR<lodgingsCreateWithoutRoomsInput, lodgingsUncheckedCreateWithoutRoomsInput>
    where?: lodgingsWhereInput
  }

  export type lodgingsUpdateToOneWithWhereWithoutRoomsInput = {
    where?: lodgingsWhereInput
    data: XOR<lodgingsUpdateWithoutRoomsInput, lodgingsUncheckedUpdateWithoutRoomsInput>
  }

  export type lodgingsUpdateWithoutRoomsInput = {
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUpdateManyWithoutLodgingsNestedInput
  }

  export type lodgingsUncheckedUpdateWithoutRoomsInput = {
    lodging_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    part?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    sigungu?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUncheckedUpdateManyWithoutLodgingsNestedInput
  }

  export type reservationsCreateWithoutUsersInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    rooms?: roomsCreateNestedOneWithoutReservationsInput
  }

  export type reservationsUncheckedCreateWithoutUsersInput = {
    reservation_id?: number
    room_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type reservationsCreateOrConnectWithoutUsersInput = {
    where: reservationsWhereUniqueInput
    create: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput>
  }

  export type reservationsCreateManyUsersInputEnvelope = {
    data: reservationsCreateManyUsersInput | reservationsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutUsersInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string | null
    lodgings?: lodgingsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutUsersInput = {
    review_id?: number
    lodging_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type reviewsCreateOrConnectWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput>
  }

  export type reviewsCreateManyUsersInputEnvelope = {
    data: reviewsCreateManyUsersInput | reviewsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type reservationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: reservationsWhereUniqueInput
    update: XOR<reservationsUpdateWithoutUsersInput, reservationsUncheckedUpdateWithoutUsersInput>
    create: XOR<reservationsCreateWithoutUsersInput, reservationsUncheckedCreateWithoutUsersInput>
  }

  export type reservationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: reservationsWhereUniqueInput
    data: XOR<reservationsUpdateWithoutUsersInput, reservationsUncheckedUpdateWithoutUsersInput>
  }

  export type reservationsUpdateManyWithWhereWithoutUsersInput = {
    where: reservationsScalarWhereInput
    data: XOR<reservationsUpdateManyMutationInput, reservationsUncheckedUpdateManyWithoutUsersInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutUsersInput, reviewsUncheckedUpdateWithoutUsersInput>
    create: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutUsersInput, reviewsUncheckedUpdateWithoutUsersInput>
  }

  export type reviewsUpdateManyWithWhereWithoutUsersInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutUsersInput>
  }

  export type reviewsCreateManyLodgingsInput = {
    review_id?: number
    user_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type roomsCreateManyLodgingsInput = {
    room_id?: number
    room_name: string
    room_count: number
    price_per_night: Decimal | DecimalJsLike | number | string
    min_occupancy: number
    max_occupancy: number
  }

  export type reviewsUpdateWithoutLodgingsInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutLodgingsInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyWithoutLodgingsInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type roomsUpdateWithoutLodgingsInput = {
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUpdateManyWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateWithoutLodgingsInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
    facilities?: facilitiesUncheckedUpdateManyWithoutRoomsNestedInput
    reservations?: reservationsUncheckedUpdateManyWithoutRoomsNestedInput
    room_photos?: room_photosUncheckedUpdateManyWithoutRoomsNestedInput
  }

  export type roomsUncheckedUpdateManyWithoutLodgingsInput = {
    room_id?: IntFieldUpdateOperationsInput | number
    room_name?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
    price_per_night?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    min_occupancy?: IntFieldUpdateOperationsInput | number
    max_occupancy?: IntFieldUpdateOperationsInput | number
  }

  export type facilitiesCreateManyRoomsInput = {
    facility_id?: number
    has_bathfacility?: boolean | null
    has_bath?: number | null
    has_home_theater?: boolean | null
    has_air_conditioning?: boolean | null
    has_tv?: boolean | null
    has_pc?: boolean | null
    cable?: boolean | null
    has_internet?: boolean | null
    has_refrigerator?: boolean | null
    has_toiletries?: boolean | null
    has_sofa?: boolean | null
    has_cook?: boolean | null
    has_table?: boolean | null
    hairdryer?: boolean | null
  }

  export type reservationsCreateManyRoomsInput = {
    reservation_id?: number
    user_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type room_photosCreateManyRoomsInput = {
    photo_id?: number
    photo_url: string
  }

  export type facilitiesUpdateWithoutRoomsInput = {
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type facilitiesUncheckedUpdateWithoutRoomsInput = {
    facility_id?: IntFieldUpdateOperationsInput | number
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type facilitiesUncheckedUpdateManyWithoutRoomsInput = {
    facility_id?: IntFieldUpdateOperationsInput | number
    has_bathfacility?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_bath?: NullableIntFieldUpdateOperationsInput | number | null
    has_home_theater?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_air_conditioning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_tv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_pc?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_internet?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_refrigerator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_toiletries?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_sofa?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_cook?: NullableBoolFieldUpdateOperationsInput | boolean | null
    has_table?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hairdryer?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type reservationsUpdateWithoutRoomsInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutReservationsNestedInput
  }

  export type reservationsUncheckedUpdateWithoutRoomsInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reservationsUncheckedUpdateManyWithoutRoomsInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type room_photosUpdateWithoutRoomsInput = {
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type room_photosUncheckedUpdateWithoutRoomsInput = {
    photo_id?: IntFieldUpdateOperationsInput | number
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type room_photosUncheckedUpdateManyWithoutRoomsInput = {
    photo_id?: IntFieldUpdateOperationsInput | number
    photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type reservationsCreateManyUsersInput = {
    reservation_id?: number
    room_id?: number | null
    check_in_date: Date | string
    check_out_date: Date | string
    person_num: number
    total_price: Decimal | DecimalJsLike | number | string
    status: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type reviewsCreateManyUsersInput = {
    review_id?: number
    lodging_id?: number | null
    rating: number
    comment?: string | null
    created_at?: Date | string | null
  }

  export type reservationsUpdateWithoutUsersInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rooms?: roomsUpdateOneWithoutReservationsNestedInput
  }

  export type reservationsUncheckedUpdateWithoutUsersInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reservationsUncheckedUpdateManyWithoutUsersInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    room_id?: NullableIntFieldUpdateOperationsInput | number | null
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    person_num?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUpdateWithoutUsersInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lodgings?: lodgingsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutUsersInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyWithoutUsersInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lodging_id?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LodgingsCountOutputTypeDefaultArgs instead
     */
    export type LodgingsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LodgingsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomsCountOutputTypeDefaultArgs instead
     */
    export type RoomsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use facilitiesDefaultArgs instead
     */
    export type facilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = facilitiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use lodgingsDefaultArgs instead
     */
    export type lodgingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = lodgingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reservationsDefaultArgs instead
     */
    export type reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reservationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reviewsDefaultArgs instead
     */
    export type reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reviewsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use room_photosDefaultArgs instead
     */
    export type room_photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = room_photosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roomsDefaultArgs instead
     */
    export type roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = roomsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}