generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id      Int            @id @default(autoincrement())
  user_name    String         @db.VarChar(255)
  email        String         @unique(map: "email") @db.Char(60)
  password     String         @db.VarChar(255)
  phone_number String         @db.VarChar(20)
  created_at   DateTime?      @default(now()) @db.DateTime(0)
  updated_at   DateTime?      @default(now()) @db.DateTime(0)
  permission   String         @db.VarChar(5)
  birth        DateTime       @db.Date
  gender       String         @db.VarChar(2)
  reservations reservations[]
  reviews      reviews[]
}

model facilities {
  facility_id          Int      @id @default(autoincrement())
  room_id              Int?
  has_bathfacility     Boolean?
  has_bath             Int?     @db.TinyInt
  has_home_theater     Boolean?
  has_air_conditioning Boolean?
  has_tv               Boolean?
  has_pc               Boolean?
  cable                Boolean?
  has_internet         Boolean?
  has_refrigerator     Boolean?
  has_toiletries       Boolean?
  has_sofa             Boolean?
  has_cook             Boolean?
  has_table            Boolean?
  hairdryer            Boolean?
  rooms                rooms?   @relation(fields: [room_id], references: [room_id], onDelete: Cascade, map: "facilities_ibfk_1")

  @@index([room_id], map: "room_id")
}

model lodgings {
  lodging_id Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  part       String    @db.VarChar(50)
  area       String    @db.VarChar(100)
  sigungu    String?   @db.VarChar(100)
  address    String    @db.VarChar(500)
  tag        String?   @db.VarChar(50)
  rating     Decimal?  @db.Decimal(2, 1)
  tel        String?   @db.VarChar(20)
  main_image String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
  reviews    reviews[]
  rooms      rooms[]
}

model reservations {
  reservation_id Int       @id @default(autoincrement())
  user_id        Int?
  room_id        Int?
  check_in_date  DateTime  @db.Date
  check_out_date DateTime  @db.Date
  person_num     Int
  total_price    Decimal   @db.Decimal(10, 2)
  status         String    @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.DateTime(0)
  updated_at     DateTime? @default(now()) @db.DateTime(0)
  username       String    @db.VarChar(100)
  phonenumber    String    @db.VarChar(20)
  users          users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "reservations_ibfk_1")
  rooms          rooms?    @relation(fields: [room_id], references: [room_id], onDelete: Cascade, map: "reservations_ibfk_2")
  reviews        reviews[]

  @@index([user_id], map: "reservations_ibfk_1")
  @@index([room_id], map: "reservations_ibfk_2")
}

model reviews {
  review_id      Int             @id @default(autoincrement())
  reservation_id Int?
  lodging_id     Int?
  user_id        Int?
  rating         Int
  COMMENT        String?         @db.Text
  created_at     DateTime?       @default(now()) @db.DateTime(0)
  review_photos  review_photos[]
  users          users?          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "reviews_ibfk_2")
  lodgings       lodgings?       @relation(fields: [lodging_id], references: [lodging_id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_3")
  reservations   reservations?   @relation(fields: [reservation_id], references: [reservation_id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_4")

  @@index([user_id], map: "reviews_ibfk_2")
  @@index([lodging_id], map: "reviews_ibfk_3")
  @@index([reservation_id], map: "reviews_ibfk_4")
}

model room_photos {
  photo_id  Int     @id @default(autoincrement())
  room_id   Int?
  photo_url String? @db.VarChar(500)
  rooms     rooms?  @relation(fields: [room_id], references: [room_id], onDelete: Cascade, map: "room_photos_ibfk_1")

  @@index([room_id], map: "room_photos_ibfk_1")
}

model rooms {
  room_id         Int            @id @default(autoincrement())
  lodging_id      Int?
  room_name       String         @db.VarChar(255)
  room_count      Int
  price_per_night Decimal        @db.Decimal(10, 2)
  min_occupancy   Int
  max_occupancy   Int
  facilities      facilities[]
  reservations    reservations[]
  room_photos     room_photos[]
  lodgings        lodgings?      @relation(fields: [lodging_id], references: [lodging_id], onDelete: Cascade, map: "rooms_ibfk_1")

  @@index([lodging_id], map: "rooms_ibfk_1")
}

model review_photos {
  review_photos_id Int      @id @default(autoincrement())
  lodging_id       Int
  review_id        Int?
  review_photos_1  String?  @db.VarChar(255)
  review_photos_2  String?  @db.VarChar(255)
  review_photos_3  String?  @db.VarChar(255)
  review_photos_4  String?  @db.VarChar(255)
  review_photos_5  String?  @db.VarChar(255)
  reviews          reviews? @relation(fields: [review_id], references: [review_id], onDelete: Cascade, map: "review_photos_ibfk_2")

  @@index([lodging_id], map: "lodging_id")
  @@index([review_id], map: "review_photos_ibfk_2")
}

model alt_room_photos {
  id        Int    @id @default(autoincrement())
  photo_url String @db.VarChar(500)
}
